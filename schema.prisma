generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "./src/prisma/generated/type-graphql"
  emitTranspiledCode = "true"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://masesays:54llyB4mb4ch@aa1wjr87z9k504q.cgnqtd2avkoh.ap-southeast-2.rds.amazonaws.com:5432/ebdb"
}

model upload_file {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  alternativeText   String?             @db.VarChar(255)
  caption           String?             @db.VarChar(255)
  width             Int?
  height            Int?
  formats           Json?
  hash              String              @db.VarChar(255)
  ext               String?             @db.VarChar(255)
  mime              String              @db.VarChar(255)
  size              Decimal             @db.Decimal(10, 2)
  url               String              @db.VarChar(255)
  previewUrl        String?             @db.VarChar(255)
  provider          String              @db.VarChar(255)
  provider_metadata Json?
  created_by        Int?
  updated_by        Int?
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?           @default(now()) @db.Timestamptz(6)
  uploadFileMorph   upload_file_morph[]
}

model upload_file_morph {
  id             Int          @id @default(autoincrement())
  upload_file_id Int?
  related_id     Int?
  related_type   String?
  field          String?
  order          Int?
  uploadFile     upload_file? @relation(fields: [upload_file_id], references: [id])
  venues         venues?      @relation(fields: [related_id], references: [id])
}

model venueType {
  id         Int       @id @default(autoincrement())
  created_by Int?
  updated_by Int?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  name       String?   @db.VarChar(255)
  venues     venues[]
}

model venues {
  id               Int                 @id @default(autoincrement())
  title            String?             @db.VarChar(255)
  description      String?
  address          String?             @db.VarChar(255)
  suburb           String?             @db.VarChar(255)
  city             String?             @db.VarChar(255)
  postCode         String?             @db.VarChar(255)
  lat              Float?
  lon              Float?
  website          String?             @db.VarChar(255)
  venue_type       Int?
  breakfast        Boolean?
  lunch            Boolean?
  dinner           Boolean?
  visible          Boolean?
  created_by       Int?
  updated_by       Int?
  created_at       DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?           @default(now()) @db.Timestamptz(6)
  test             String?             @db.VarChar(255)
  cosy             Boolean?
  romantic         Boolean?
  weddings         Boolean?
  post_code        String?             @db.VarChar(255)
  bachelor_party   Boolean?
  hen_party        Boolean?
  outdoor_area     Boolean?
  outdoor_dinning  Boolean?
  outdoor_bar      Boolean?
  venueType        venueType?          @relation(fields: [venue_type], references: [id])
  uploadFileMorph  upload_file_morph[]
  favourite        favourites?
  itinerary_places itinerary_places?
}

model itinerary {
  id             Int                @id @default(autoincrement())
  user_id        String?            @db.VarChar(255)
  itinerary_date DateTime?
  created_by     Int?
  updated_by     Int?
  created_at     DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?          @default(now()) @db.Timestamptz(6)
  places         itinerary_places[]
}

model itinerary_places {
  id           Int       @id @default(autoincrement())
  itinerary_id Int
  user_id      String?    @db.VarChar(255)
  venue_data   Json
  bestFor      Json?
  created_by   Int?
  updated_by   Int?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  date         DateTime? @db.Date
  time         DateTime? @db.Timestamptz(6)
  venue_id     Int?
  venue       venues?   @relation(fields: [venue_id], references: [id])
  itinerary   itinerary? @relation(fields: [itinerary_id], references: [id])
}

model favourites {
  id         Int       @id @default(autoincrement())
  user_id    String?   @db.VarChar(255)
  bestFor    Json?
  venue_id   Int?
  created_by Int?
  updated_by Int?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  venue     venues?   @relation(fields: [venue_id], references: [id])
}
