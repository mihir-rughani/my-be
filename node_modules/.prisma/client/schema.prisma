generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "./src/prisma/generated/type-graphql"
  emitTranspiledCode = "true"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://masesays:54llyB4mb4ch@aaydv1gqp38iow.cgnqtd2avkoh.ap-southeast-2.rds.amazonaws.com:5432/ebdb"
}

model upload_file {
  id                Int       @id @default(dbgenerated("nextval('upload_file_id_seq'::regclass)"))
  name              String    @db.VarChar(255)
  alternativeText   String?   @db.VarChar(255)
  caption           String?   @db.VarChar(255)
  width             Int?
  height            Int?
  formats           Json?
  hash              String    @db.VarChar(255)
  ext               String?   @db.VarChar(255)
  mime              String    @db.VarChar(255)
  size              Decimal   @db.Decimal(10, 2)
  url               String    @db.VarChar(255)
  previewUrl        String?   @db.VarChar(255)
  provider          String    @db.VarChar(255)
  provider_metadata Json?
  created_by        Int?
  updated_by        Int?
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  uploadFileMorph   upload_file_morph[]
}

model upload_file_morph {
  id             Int     @id @default(dbgenerated("nextval('upload_file_morph_id_seq'::regclass)"))
  upload_file_id Int?
  related_id     Int?
  related_type   String?
  field          String?
  order          Int?
  uploadFile upload_file? @relation(fields: [upload_file_id], references: [id])
  venues venues? @relation(fields: [related_id], references: [id])
}

model venueType {
  id         Int       @id @default(dbgenerated("nextval('\"venueType_id_seq\"'::regclass)"))
  created_by Int?
  updated_by Int?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  name       String?   @db.VarChar(255)
  venues     venues[]
}

model venues {
  id              Int        @id @default(dbgenerated("nextval('venues_id_seq1'::regclass)"))
  title           String?    @db.VarChar(255)
  description     String?
  address         String?    @db.VarChar(255)
  suburb          String?    @db.VarChar(255)
  city            String?    @db.VarChar(255)
  postCode        String?    @db.VarChar(255)
  lat             Float?
  lon             Float?
  website         String?    @db.VarChar(255)
  venue_type      Int?
  breakfast       Boolean?
  lunch           Boolean?
  dinner          Boolean?
  visible         Boolean?
  created_by      Int?
  updated_by      Int?
  created_at      DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?  @default(now()) @db.Timestamptz(6)
  test            String?    @db.VarChar(255)
  cosy            Boolean?
  romantic        Boolean?
  weddings        Boolean?
  post_code       String?    @db.VarChar(255)
  bachelor_party  Boolean?
  hen_party       Boolean?
  outdoor_area    Boolean?
  outdoor_dinning Boolean?
  outdoor_bar     Boolean?
  venueType       venueType? @relation(fields: [venue_type], references: [id])
  uploadFileMorph   upload_file_morph[]
}
