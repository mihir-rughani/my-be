
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.26.0
 * Query Engine version: 9b816b3aa13cc270074f172f30d6eda8a8ce867d
 */
Prisma.prismaVersion = {
  client: "2.26.0",
  engine: "9b816b3aa13cc270074f172f30d6eda8a8ce867d"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Upload_fileScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  alternativeText: 'alternativeText',
  caption: 'caption',
  width: 'width',
  height: 'height',
  formats: 'formats',
  hash: 'hash',
  ext: 'ext',
  mime: 'mime',
  size: 'size',
  url: 'url',
  previewUrl: 'previewUrl',
  provider: 'provider',
  provider_metadata: 'provider_metadata',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Upload_file_morphScalarFieldEnum = makeEnum({
  id: 'id',
  upload_file_id: 'upload_file_id',
  related_id: 'related_id',
  related_type: 'related_type',
  field: 'field',
  order: 'order'
});

exports.Prisma.VenueTypeScalarFieldEnum = makeEnum({
  id: 'id',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name'
});

exports.Prisma.VenuesScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  description: 'description',
  address: 'address',
  suburb: 'suburb',
  city: 'city',
  postCode: 'postCode',
  lat: 'lat',
  lon: 'lon',
  website: 'website',
  venue_type: 'venue_type',
  breakfast: 'breakfast',
  lunch: 'lunch',
  dinner: 'dinner',
  visible: 'visible',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  test: 'test',
  cosy: 'cosy',
  romantic: 'romantic',
  weddings: 'weddings',
  post_code: 'post_code',
  bachelor_party: 'bachelor_party',
  hen_party: 'hen_party',
  outdoor_area: 'outdoor_area',
  outdoor_dinning: 'outdoor_dinning',
  outdoor_bar: 'outdoor_bar'
});

exports.Prisma.ItineraryScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  itinerary_date: 'itinerary_date',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Itinerary_placesScalarFieldEnum = makeEnum({
  id: 'id',
  itinerary_id: 'itinerary_id',
  user_id: 'user_id',
  venue_data: 'venue_data',
  bestFor: 'bestFor',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  date: 'date',
  time: 'time',
  venue_id: 'venue_id'
});

exports.Prisma.FavouritesScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  bestFor: 'bestFor',
  venue_id: 'venue_id',
  created_by: 'created_by',
  updated_by: 'updated_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  upload_file: 'upload_file',
  upload_file_morph: 'upload_file_morph',
  venueType: 'venueType',
  venues: 'venues',
  itinerary: 'itinerary',
  itinerary_places: 'itinerary_places',
  favourites: 'favourites'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
