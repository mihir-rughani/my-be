
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model upload_file
 */

export type upload_file = {
  id: number
  name: string
  alternativeText: string | null
  caption: string | null
  width: number | null
  height: number | null
  formats: Prisma.JsonValue | null
  hash: string
  ext: string | null
  mime: string
  size: Prisma.Decimal
  url: string
  previewUrl: string | null
  provider: string
  provider_metadata: Prisma.JsonValue | null
  created_by: number | null
  updated_by: number | null
  created_at: Date | null
  updated_at: Date | null
}

/**
 * Model upload_file_morph
 */

export type upload_file_morph = {
  id: number
  upload_file_id: number | null
  related_id: number | null
  related_type: string | null
  field: string | null
  order: number | null
}

/**
 * Model venueType
 */

export type venueType = {
  id: number
  created_by: number | null
  updated_by: number | null
  created_at: Date | null
  updated_at: Date | null
  name: string | null
}

/**
 * Model venues
 */

export type venues = {
  id: number
  title: string | null
  description: string | null
  address: string | null
  suburb: string | null
  city: string | null
  postCode: string | null
  lat: number | null
  lon: number | null
  website: string | null
  venue_type: number | null
  breakfast: boolean | null
  lunch: boolean | null
  dinner: boolean | null
  visible: boolean | null
  created_by: number | null
  updated_by: number | null
  created_at: Date | null
  updated_at: Date | null
  test: string | null
  cosy: boolean | null
  romantic: boolean | null
  weddings: boolean | null
  post_code: string | null
  bachelor_party: boolean | null
  hen_party: boolean | null
  outdoor_area: boolean | null
  outdoor_dinning: boolean | null
  outdoor_bar: boolean | null
}

/**
 * Model itinerary
 */

export type itinerary = {
  id: number
  user_id: string | null
  itinerary_date: Date | null
  created_by: number | null
  updated_by: number | null
  created_at: Date | null
  updated_at: Date | null
}

/**
 * Model itinerary_places
 */

export type itinerary_places = {
  id: number
  user_id: string | null
  itinerary_id: number | null
  venue_data: Prisma.JsonValue | null
  date: Date | null
  time: Date | null
  created_by: number | null
  updated_by: number | null
  created_at: Date | null
  updated_at: Date | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Upload_files
 * const upload_files = await prisma.upload_file.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Upload_files
   * const upload_files = await prisma.upload_file.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.$executeRaw``, values will be escaped automatically
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.$executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.$queryRaw``, values will be escaped automatically
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.$queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.upload_file`: Exposes CRUD operations for the **upload_file** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Upload_files
    * const upload_files = await prisma.upload_file.findMany()
    * ```
    */
  get upload_file(): Prisma.upload_fileDelegate<GlobalReject>;

  /**
   * `prisma.upload_file_morph`: Exposes CRUD operations for the **upload_file_morph** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Upload_file_morphs
    * const upload_file_morphs = await prisma.upload_file_morph.findMany()
    * ```
    */
  get upload_file_morph(): Prisma.upload_file_morphDelegate<GlobalReject>;

  /**
   * `prisma.venueType`: Exposes CRUD operations for the **venueType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VenueTypes
    * const venueTypes = await prisma.venueType.findMany()
    * ```
    */
  get venueType(): Prisma.venueTypeDelegate<GlobalReject>;

  /**
   * `prisma.venues`: Exposes CRUD operations for the **venues** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Venues
    * const venues = await prisma.venues.findMany()
    * ```
    */
  get venues(): Prisma.venuesDelegate<GlobalReject>;

  /**
   * `prisma.itinerary`: Exposes CRUD operations for the **itinerary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Itineraries
    * const itineraries = await prisma.itinerary.findMany()
    * ```
    */
  get itinerary(): Prisma.itineraryDelegate<GlobalReject>;

  /**
   * `prisma.itinerary_places`: Exposes CRUD operations for the **itinerary_places** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Itinerary_places
    * const itinerary_places = await prisma.itinerary_places.findMany()
    * ```
    */
  get itinerary_places(): Prisma.itinerary_placesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.26.0
   * Query Engine version: 9b816b3aa13cc270074f172f30d6eda8a8ce867d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    upload_file: 'upload_file',
    upload_file_morph: 'upload_file_morph',
    venueType: 'venueType',
    venues: 'venues',
    itinerary: 'itinerary',
    itinerary_places: 'itinerary_places'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model upload_file
   */


  export type AggregateUpload_file = {
    _count: Upload_fileCountAggregateOutputType | null
    count: Upload_fileCountAggregateOutputType | null
    _avg: Upload_fileAvgAggregateOutputType | null
    avg: Upload_fileAvgAggregateOutputType | null
    _sum: Upload_fileSumAggregateOutputType | null
    sum: Upload_fileSumAggregateOutputType | null
    _min: Upload_fileMinAggregateOutputType | null
    min: Upload_fileMinAggregateOutputType | null
    _max: Upload_fileMaxAggregateOutputType | null
    max: Upload_fileMaxAggregateOutputType | null
  }

  export type Upload_fileAvgAggregateOutputType = {
    id: number | null
    width: number | null
    height: number | null
    size: Decimal | null
    created_by: number | null
    updated_by: number | null
  }

  export type Upload_fileSumAggregateOutputType = {
    id: number | null
    width: number | null
    height: number | null
    size: Decimal | null
    created_by: number | null
    updated_by: number | null
  }

  export type Upload_fileMinAggregateOutputType = {
    id: number | null
    name: string | null
    alternativeText: string | null
    caption: string | null
    width: number | null
    height: number | null
    hash: string | null
    ext: string | null
    mime: string | null
    size: Decimal | null
    url: string | null
    previewUrl: string | null
    provider: string | null
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Upload_fileMaxAggregateOutputType = {
    id: number | null
    name: string | null
    alternativeText: string | null
    caption: string | null
    width: number | null
    height: number | null
    hash: string | null
    ext: string | null
    mime: string | null
    size: Decimal | null
    url: string | null
    previewUrl: string | null
    provider: string | null
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Upload_fileCountAggregateOutputType = {
    id: number
    name: number
    alternativeText: number
    caption: number
    width: number
    height: number
    formats: number
    hash: number
    ext: number
    mime: number
    size: number
    url: number
    previewUrl: number
    provider: number
    provider_metadata: number
    created_by: number
    updated_by: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Upload_fileAvgAggregateInputType = {
    id?: true
    width?: true
    height?: true
    size?: true
    created_by?: true
    updated_by?: true
  }

  export type Upload_fileSumAggregateInputType = {
    id?: true
    width?: true
    height?: true
    size?: true
    created_by?: true
    updated_by?: true
  }

  export type Upload_fileMinAggregateInputType = {
    id?: true
    name?: true
    alternativeText?: true
    caption?: true
    width?: true
    height?: true
    hash?: true
    ext?: true
    mime?: true
    size?: true
    url?: true
    previewUrl?: true
    provider?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
  }

  export type Upload_fileMaxAggregateInputType = {
    id?: true
    name?: true
    alternativeText?: true
    caption?: true
    width?: true
    height?: true
    hash?: true
    ext?: true
    mime?: true
    size?: true
    url?: true
    previewUrl?: true
    provider?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
  }

  export type Upload_fileCountAggregateInputType = {
    id?: true
    name?: true
    alternativeText?: true
    caption?: true
    width?: true
    height?: true
    formats?: true
    hash?: true
    ext?: true
    mime?: true
    size?: true
    url?: true
    previewUrl?: true
    provider?: true
    provider_metadata?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Upload_fileAggregateArgs = {
    /**
     * Filter which upload_file to aggregate.
     * 
    **/
    where?: upload_fileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of upload_files to fetch.
     * 
    **/
    orderBy?: Enumerable<upload_fileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: upload_fileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` upload_files from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` upload_files.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned upload_files
    **/
    _count?: true | Upload_fileCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | Upload_fileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Upload_fileAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: Upload_fileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Upload_fileSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: Upload_fileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Upload_fileMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: Upload_fileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Upload_fileMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: Upload_fileMaxAggregateInputType
  }

  export type GetUpload_fileAggregateType<T extends Upload_fileAggregateArgs> = {
        [P in keyof T & keyof AggregateUpload_file]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUpload_file[P]>
      : GetScalarType<T[P], AggregateUpload_file[P]>
  }


    
    
  export type Upload_fileGroupByArgs = {
    where?: upload_fileWhereInput
    orderBy?: Enumerable<upload_fileOrderByInput>
    by: Array<Upload_fileScalarFieldEnum>
    having?: upload_fileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Upload_fileCountAggregateInputType | true
    _avg?: Upload_fileAvgAggregateInputType
    _sum?: Upload_fileSumAggregateInputType
    _min?: Upload_fileMinAggregateInputType
    _max?: Upload_fileMaxAggregateInputType
  }


  export type Upload_fileGroupByOutputType = {
    id: number
    name: string
    alternativeText: string | null
    caption: string | null
    width: number | null
    height: number | null
    formats: JsonValue | null
    hash: string
    ext: string | null
    mime: string
    size: Decimal
    url: string
    previewUrl: string | null
    provider: string
    provider_metadata: JsonValue | null
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
    _count: Upload_fileCountAggregateOutputType | null
    _avg: Upload_fileAvgAggregateOutputType | null
    _sum: Upload_fileSumAggregateOutputType | null
    _min: Upload_fileMinAggregateOutputType | null
    _max: Upload_fileMaxAggregateOutputType | null
  }

  type GetUpload_fileGroupByPayload<T extends Upload_fileGroupByArgs> = Promise<
    Array<
      PickArray<Upload_fileGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Upload_fileGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Upload_fileGroupByOutputType[P]> 
            : GetScalarType<T[P], Upload_fileGroupByOutputType[P]>
        }
      > 
    >


  export type upload_fileSelect = {
    id?: boolean
    name?: boolean
    alternativeText?: boolean
    caption?: boolean
    width?: boolean
    height?: boolean
    formats?: boolean
    hash?: boolean
    ext?: boolean
    mime?: boolean
    size?: boolean
    url?: boolean
    previewUrl?: boolean
    provider?: boolean
    provider_metadata?: boolean
    created_by?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    uploadFileMorph?: boolean | upload_file_morphFindManyArgs
  }

  export type upload_fileInclude = {
    uploadFileMorph?: boolean | upload_file_morphFindManyArgs
  }

  export type upload_fileGetPayload<
    S extends boolean | null | undefined | upload_fileArgs,
    U = keyof S
      > = S extends true
        ? upload_file
    : S extends undefined
    ? never
    : S extends upload_fileArgs | upload_fileFindManyArgs
    ?'include' extends U
    ? upload_file  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'uploadFileMorph'
        ? Array < upload_file_morphGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof upload_file ?upload_file [P]
  : 
          P extends 'uploadFileMorph'
        ? Array < upload_file_morphGetPayload<S['select'][P]>>  : never
  } 
    : upload_file
  : upload_file


  type upload_fileCountArgs = Merge<
    Omit<upload_fileFindManyArgs, 'select' | 'include'> & {
      select?: Upload_fileCountAggregateInputType | true
    }
  >

  export interface upload_fileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Upload_file that matches the filter.
     * @param {upload_fileFindUniqueArgs} args - Arguments to find a Upload_file
     * @example
     * // Get one Upload_file
     * const upload_file = await prisma.upload_file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends upload_fileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, upload_fileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'upload_file'> extends True ? CheckSelect<T, Prisma__upload_fileClient<upload_file>, Prisma__upload_fileClient<upload_fileGetPayload<T>>> : CheckSelect<T, Prisma__upload_fileClient<upload_file | null >, Prisma__upload_fileClient<upload_fileGetPayload<T> | null >>

    /**
     * Find the first Upload_file that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {upload_fileFindFirstArgs} args - Arguments to find a Upload_file
     * @example
     * // Get one Upload_file
     * const upload_file = await prisma.upload_file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends upload_fileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, upload_fileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'upload_file'> extends True ? CheckSelect<T, Prisma__upload_fileClient<upload_file>, Prisma__upload_fileClient<upload_fileGetPayload<T>>> : CheckSelect<T, Prisma__upload_fileClient<upload_file | null >, Prisma__upload_fileClient<upload_fileGetPayload<T> | null >>

    /**
     * Find zero or more Upload_files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {upload_fileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Upload_files
     * const upload_files = await prisma.upload_file.findMany()
     * 
     * // Get first 10 Upload_files
     * const upload_files = await prisma.upload_file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const upload_fileWithIdOnly = await prisma.upload_file.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends upload_fileFindManyArgs>(
      args?: SelectSubset<T, upload_fileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<upload_file>>, PrismaPromise<Array<upload_fileGetPayload<T>>>>

    /**
     * Create a Upload_file.
     * @param {upload_fileCreateArgs} args - Arguments to create a Upload_file.
     * @example
     * // Create one Upload_file
     * const Upload_file = await prisma.upload_file.create({
     *   data: {
     *     // ... data to create a Upload_file
     *   }
     * })
     * 
    **/
    create<T extends upload_fileCreateArgs>(
      args: SelectSubset<T, upload_fileCreateArgs>
    ): CheckSelect<T, Prisma__upload_fileClient<upload_file>, Prisma__upload_fileClient<upload_fileGetPayload<T>>>

    /**
     * Create many Upload_files.
     *     @param {upload_fileCreateManyArgs} args - Arguments to create many Upload_files.
     *     @example
     *     // Create many Upload_files
     *     const upload_file = await prisma.upload_file.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends upload_fileCreateManyArgs>(
      args?: SelectSubset<T, upload_fileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Upload_file.
     * @param {upload_fileDeleteArgs} args - Arguments to delete one Upload_file.
     * @example
     * // Delete one Upload_file
     * const Upload_file = await prisma.upload_file.delete({
     *   where: {
     *     // ... filter to delete one Upload_file
     *   }
     * })
     * 
    **/
    delete<T extends upload_fileDeleteArgs>(
      args: SelectSubset<T, upload_fileDeleteArgs>
    ): CheckSelect<T, Prisma__upload_fileClient<upload_file>, Prisma__upload_fileClient<upload_fileGetPayload<T>>>

    /**
     * Update one Upload_file.
     * @param {upload_fileUpdateArgs} args - Arguments to update one Upload_file.
     * @example
     * // Update one Upload_file
     * const upload_file = await prisma.upload_file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends upload_fileUpdateArgs>(
      args: SelectSubset<T, upload_fileUpdateArgs>
    ): CheckSelect<T, Prisma__upload_fileClient<upload_file>, Prisma__upload_fileClient<upload_fileGetPayload<T>>>

    /**
     * Delete zero or more Upload_files.
     * @param {upload_fileDeleteManyArgs} args - Arguments to filter Upload_files to delete.
     * @example
     * // Delete a few Upload_files
     * const { count } = await prisma.upload_file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends upload_fileDeleteManyArgs>(
      args?: SelectSubset<T, upload_fileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Upload_files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {upload_fileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Upload_files
     * const upload_file = await prisma.upload_file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends upload_fileUpdateManyArgs>(
      args: SelectSubset<T, upload_fileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Upload_file.
     * @param {upload_fileUpsertArgs} args - Arguments to update or create a Upload_file.
     * @example
     * // Update or create a Upload_file
     * const upload_file = await prisma.upload_file.upsert({
     *   create: {
     *     // ... data to create a Upload_file
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Upload_file we want to update
     *   }
     * })
    **/
    upsert<T extends upload_fileUpsertArgs>(
      args: SelectSubset<T, upload_fileUpsertArgs>
    ): CheckSelect<T, Prisma__upload_fileClient<upload_file>, Prisma__upload_fileClient<upload_fileGetPayload<T>>>

    /**
     * Count the number of Upload_files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {upload_fileCountArgs} args - Arguments to filter Upload_files to count.
     * @example
     * // Count the number of Upload_files
     * const count = await prisma.upload_file.count({
     *   where: {
     *     // ... the filter for the Upload_files we want to count
     *   }
     * })
    **/
    count<T extends upload_fileCountArgs>(
      args?: Subset<T, upload_fileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Upload_fileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Upload_file.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Upload_fileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Upload_fileAggregateArgs>(args: Subset<T, Upload_fileAggregateArgs>): PrismaPromise<GetUpload_fileAggregateType<T>>

    /**
     * Group by Upload_file.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Upload_fileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Upload_fileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Upload_fileGroupByArgs['orderBy'] }
        : { orderBy?: Upload_fileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Upload_fileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUpload_fileGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for upload_file.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__upload_fileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    uploadFileMorph<T extends upload_file_morphFindManyArgs = {}>(args?: Subset<T, upload_file_morphFindManyArgs>): CheckSelect<T, PrismaPromise<Array<upload_file_morph>>, PrismaPromise<Array<upload_file_morphGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * upload_file findUnique
   */
  export type upload_fileFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the upload_file
     * 
    **/
    select?: upload_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_fileInclude | null
    /**
     * Throw an Error if a upload_file can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which upload_file to fetch.
     * 
    **/
    where: upload_fileWhereUniqueInput
  }


  /**
   * upload_file findFirst
   */
  export type upload_fileFindFirstArgs = {
    /**
     * Select specific fields to fetch from the upload_file
     * 
    **/
    select?: upload_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_fileInclude | null
    /**
     * Throw an Error if a upload_file can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which upload_file to fetch.
     * 
    **/
    where?: upload_fileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of upload_files to fetch.
     * 
    **/
    orderBy?: Enumerable<upload_fileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for upload_files.
     * 
    **/
    cursor?: upload_fileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` upload_files from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` upload_files.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of upload_files.
     * 
    **/
    distinct?: Enumerable<Upload_fileScalarFieldEnum>
  }


  /**
   * upload_file findMany
   */
  export type upload_fileFindManyArgs = {
    /**
     * Select specific fields to fetch from the upload_file
     * 
    **/
    select?: upload_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_fileInclude | null
    /**
     * Filter, which upload_files to fetch.
     * 
    **/
    where?: upload_fileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of upload_files to fetch.
     * 
    **/
    orderBy?: Enumerable<upload_fileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing upload_files.
     * 
    **/
    cursor?: upload_fileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` upload_files from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` upload_files.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Upload_fileScalarFieldEnum>
  }


  /**
   * upload_file create
   */
  export type upload_fileCreateArgs = {
    /**
     * Select specific fields to fetch from the upload_file
     * 
    **/
    select?: upload_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_fileInclude | null
    /**
     * The data needed to create a upload_file.
     * 
    **/
    data: XOR<upload_fileCreateInput, upload_fileUncheckedCreateInput>
  }


  /**
   * upload_file createMany
   */
  export type upload_fileCreateManyArgs = {
    data: Enumerable<upload_fileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * upload_file update
   */
  export type upload_fileUpdateArgs = {
    /**
     * Select specific fields to fetch from the upload_file
     * 
    **/
    select?: upload_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_fileInclude | null
    /**
     * The data needed to update a upload_file.
     * 
    **/
    data: XOR<upload_fileUpdateInput, upload_fileUncheckedUpdateInput>
    /**
     * Choose, which upload_file to update.
     * 
    **/
    where: upload_fileWhereUniqueInput
  }


  /**
   * upload_file updateMany
   */
  export type upload_fileUpdateManyArgs = {
    data: XOR<upload_fileUpdateManyMutationInput, upload_fileUncheckedUpdateManyInput>
    where?: upload_fileWhereInput
  }


  /**
   * upload_file upsert
   */
  export type upload_fileUpsertArgs = {
    /**
     * Select specific fields to fetch from the upload_file
     * 
    **/
    select?: upload_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_fileInclude | null
    /**
     * The filter to search for the upload_file to update in case it exists.
     * 
    **/
    where: upload_fileWhereUniqueInput
    /**
     * In case the upload_file found by the `where` argument doesn't exist, create a new upload_file with this data.
     * 
    **/
    create: XOR<upload_fileCreateInput, upload_fileUncheckedCreateInput>
    /**
     * In case the upload_file was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<upload_fileUpdateInput, upload_fileUncheckedUpdateInput>
  }


  /**
   * upload_file delete
   */
  export type upload_fileDeleteArgs = {
    /**
     * Select specific fields to fetch from the upload_file
     * 
    **/
    select?: upload_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_fileInclude | null
    /**
     * Filter which upload_file to delete.
     * 
    **/
    where: upload_fileWhereUniqueInput
  }


  /**
   * upload_file deleteMany
   */
  export type upload_fileDeleteManyArgs = {
    where?: upload_fileWhereInput
  }


  /**
   * upload_file without action
   */
  export type upload_fileArgs = {
    /**
     * Select specific fields to fetch from the upload_file
     * 
    **/
    select?: upload_fileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_fileInclude | null
  }



  /**
   * Model upload_file_morph
   */


  export type AggregateUpload_file_morph = {
    _count: Upload_file_morphCountAggregateOutputType | null
    count: Upload_file_morphCountAggregateOutputType | null
    _avg: Upload_file_morphAvgAggregateOutputType | null
    avg: Upload_file_morphAvgAggregateOutputType | null
    _sum: Upload_file_morphSumAggregateOutputType | null
    sum: Upload_file_morphSumAggregateOutputType | null
    _min: Upload_file_morphMinAggregateOutputType | null
    min: Upload_file_morphMinAggregateOutputType | null
    _max: Upload_file_morphMaxAggregateOutputType | null
    max: Upload_file_morphMaxAggregateOutputType | null
  }

  export type Upload_file_morphAvgAggregateOutputType = {
    id: number | null
    upload_file_id: number | null
    related_id: number | null
    order: number | null
  }

  export type Upload_file_morphSumAggregateOutputType = {
    id: number | null
    upload_file_id: number | null
    related_id: number | null
    order: number | null
  }

  export type Upload_file_morphMinAggregateOutputType = {
    id: number | null
    upload_file_id: number | null
    related_id: number | null
    related_type: string | null
    field: string | null
    order: number | null
  }

  export type Upload_file_morphMaxAggregateOutputType = {
    id: number | null
    upload_file_id: number | null
    related_id: number | null
    related_type: string | null
    field: string | null
    order: number | null
  }

  export type Upload_file_morphCountAggregateOutputType = {
    id: number
    upload_file_id: number
    related_id: number
    related_type: number
    field: number
    order: number
    _all: number
  }


  export type Upload_file_morphAvgAggregateInputType = {
    id?: true
    upload_file_id?: true
    related_id?: true
    order?: true
  }

  export type Upload_file_morphSumAggregateInputType = {
    id?: true
    upload_file_id?: true
    related_id?: true
    order?: true
  }

  export type Upload_file_morphMinAggregateInputType = {
    id?: true
    upload_file_id?: true
    related_id?: true
    related_type?: true
    field?: true
    order?: true
  }

  export type Upload_file_morphMaxAggregateInputType = {
    id?: true
    upload_file_id?: true
    related_id?: true
    related_type?: true
    field?: true
    order?: true
  }

  export type Upload_file_morphCountAggregateInputType = {
    id?: true
    upload_file_id?: true
    related_id?: true
    related_type?: true
    field?: true
    order?: true
    _all?: true
  }

  export type Upload_file_morphAggregateArgs = {
    /**
     * Filter which upload_file_morph to aggregate.
     * 
    **/
    where?: upload_file_morphWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of upload_file_morphs to fetch.
     * 
    **/
    orderBy?: Enumerable<upload_file_morphOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: upload_file_morphWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` upload_file_morphs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` upload_file_morphs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned upload_file_morphs
    **/
    _count?: true | Upload_file_morphCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | Upload_file_morphCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Upload_file_morphAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: Upload_file_morphAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Upload_file_morphSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: Upload_file_morphSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Upload_file_morphMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: Upload_file_morphMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Upload_file_morphMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: Upload_file_morphMaxAggregateInputType
  }

  export type GetUpload_file_morphAggregateType<T extends Upload_file_morphAggregateArgs> = {
        [P in keyof T & keyof AggregateUpload_file_morph]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUpload_file_morph[P]>
      : GetScalarType<T[P], AggregateUpload_file_morph[P]>
  }


    
    
  export type Upload_file_morphGroupByArgs = {
    where?: upload_file_morphWhereInput
    orderBy?: Enumerable<upload_file_morphOrderByInput>
    by: Array<Upload_file_morphScalarFieldEnum>
    having?: upload_file_morphScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Upload_file_morphCountAggregateInputType | true
    _avg?: Upload_file_morphAvgAggregateInputType
    _sum?: Upload_file_morphSumAggregateInputType
    _min?: Upload_file_morphMinAggregateInputType
    _max?: Upload_file_morphMaxAggregateInputType
  }


  export type Upload_file_morphGroupByOutputType = {
    id: number
    upload_file_id: number | null
    related_id: number | null
    related_type: string | null
    field: string | null
    order: number | null
    _count: Upload_file_morphCountAggregateOutputType | null
    _avg: Upload_file_morphAvgAggregateOutputType | null
    _sum: Upload_file_morphSumAggregateOutputType | null
    _min: Upload_file_morphMinAggregateOutputType | null
    _max: Upload_file_morphMaxAggregateOutputType | null
  }

  type GetUpload_file_morphGroupByPayload<T extends Upload_file_morphGroupByArgs> = Promise<
    Array<
      PickArray<Upload_file_morphGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Upload_file_morphGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Upload_file_morphGroupByOutputType[P]> 
            : GetScalarType<T[P], Upload_file_morphGroupByOutputType[P]>
        }
      > 
    >


  export type upload_file_morphSelect = {
    id?: boolean
    upload_file_id?: boolean
    related_id?: boolean
    related_type?: boolean
    field?: boolean
    order?: boolean
    uploadFile?: boolean | upload_fileArgs
    venues?: boolean | venuesArgs
  }

  export type upload_file_morphInclude = {
    uploadFile?: boolean | upload_fileArgs
    venues?: boolean | venuesArgs
  }

  export type upload_file_morphGetPayload<
    S extends boolean | null | undefined | upload_file_morphArgs,
    U = keyof S
      > = S extends true
        ? upload_file_morph
    : S extends undefined
    ? never
    : S extends upload_file_morphArgs | upload_file_morphFindManyArgs
    ?'include' extends U
    ? upload_file_morph  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'uploadFile'
        ? upload_fileGetPayload<S['include'][P]> | null :
        P extends 'venues'
        ? venuesGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof upload_file_morph ?upload_file_morph [P]
  : 
          P extends 'uploadFile'
        ? upload_fileGetPayload<S['select'][P]> | null :
        P extends 'venues'
        ? venuesGetPayload<S['select'][P]> | null : never
  } 
    : upload_file_morph
  : upload_file_morph


  type upload_file_morphCountArgs = Merge<
    Omit<upload_file_morphFindManyArgs, 'select' | 'include'> & {
      select?: Upload_file_morphCountAggregateInputType | true
    }
  >

  export interface upload_file_morphDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Upload_file_morph that matches the filter.
     * @param {upload_file_morphFindUniqueArgs} args - Arguments to find a Upload_file_morph
     * @example
     * // Get one Upload_file_morph
     * const upload_file_morph = await prisma.upload_file_morph.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends upload_file_morphFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, upload_file_morphFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'upload_file_morph'> extends True ? CheckSelect<T, Prisma__upload_file_morphClient<upload_file_morph>, Prisma__upload_file_morphClient<upload_file_morphGetPayload<T>>> : CheckSelect<T, Prisma__upload_file_morphClient<upload_file_morph | null >, Prisma__upload_file_morphClient<upload_file_morphGetPayload<T> | null >>

    /**
     * Find the first Upload_file_morph that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {upload_file_morphFindFirstArgs} args - Arguments to find a Upload_file_morph
     * @example
     * // Get one Upload_file_morph
     * const upload_file_morph = await prisma.upload_file_morph.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends upload_file_morphFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, upload_file_morphFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'upload_file_morph'> extends True ? CheckSelect<T, Prisma__upload_file_morphClient<upload_file_morph>, Prisma__upload_file_morphClient<upload_file_morphGetPayload<T>>> : CheckSelect<T, Prisma__upload_file_morphClient<upload_file_morph | null >, Prisma__upload_file_morphClient<upload_file_morphGetPayload<T> | null >>

    /**
     * Find zero or more Upload_file_morphs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {upload_file_morphFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Upload_file_morphs
     * const upload_file_morphs = await prisma.upload_file_morph.findMany()
     * 
     * // Get first 10 Upload_file_morphs
     * const upload_file_morphs = await prisma.upload_file_morph.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const upload_file_morphWithIdOnly = await prisma.upload_file_morph.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends upload_file_morphFindManyArgs>(
      args?: SelectSubset<T, upload_file_morphFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<upload_file_morph>>, PrismaPromise<Array<upload_file_morphGetPayload<T>>>>

    /**
     * Create a Upload_file_morph.
     * @param {upload_file_morphCreateArgs} args - Arguments to create a Upload_file_morph.
     * @example
     * // Create one Upload_file_morph
     * const Upload_file_morph = await prisma.upload_file_morph.create({
     *   data: {
     *     // ... data to create a Upload_file_morph
     *   }
     * })
     * 
    **/
    create<T extends upload_file_morphCreateArgs>(
      args: SelectSubset<T, upload_file_morphCreateArgs>
    ): CheckSelect<T, Prisma__upload_file_morphClient<upload_file_morph>, Prisma__upload_file_morphClient<upload_file_morphGetPayload<T>>>

    /**
     * Create many Upload_file_morphs.
     *     @param {upload_file_morphCreateManyArgs} args - Arguments to create many Upload_file_morphs.
     *     @example
     *     // Create many Upload_file_morphs
     *     const upload_file_morph = await prisma.upload_file_morph.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends upload_file_morphCreateManyArgs>(
      args?: SelectSubset<T, upload_file_morphCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Upload_file_morph.
     * @param {upload_file_morphDeleteArgs} args - Arguments to delete one Upload_file_morph.
     * @example
     * // Delete one Upload_file_morph
     * const Upload_file_morph = await prisma.upload_file_morph.delete({
     *   where: {
     *     // ... filter to delete one Upload_file_morph
     *   }
     * })
     * 
    **/
    delete<T extends upload_file_morphDeleteArgs>(
      args: SelectSubset<T, upload_file_morphDeleteArgs>
    ): CheckSelect<T, Prisma__upload_file_morphClient<upload_file_morph>, Prisma__upload_file_morphClient<upload_file_morphGetPayload<T>>>

    /**
     * Update one Upload_file_morph.
     * @param {upload_file_morphUpdateArgs} args - Arguments to update one Upload_file_morph.
     * @example
     * // Update one Upload_file_morph
     * const upload_file_morph = await prisma.upload_file_morph.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends upload_file_morphUpdateArgs>(
      args: SelectSubset<T, upload_file_morphUpdateArgs>
    ): CheckSelect<T, Prisma__upload_file_morphClient<upload_file_morph>, Prisma__upload_file_morphClient<upload_file_morphGetPayload<T>>>

    /**
     * Delete zero or more Upload_file_morphs.
     * @param {upload_file_morphDeleteManyArgs} args - Arguments to filter Upload_file_morphs to delete.
     * @example
     * // Delete a few Upload_file_morphs
     * const { count } = await prisma.upload_file_morph.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends upload_file_morphDeleteManyArgs>(
      args?: SelectSubset<T, upload_file_morphDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Upload_file_morphs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {upload_file_morphUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Upload_file_morphs
     * const upload_file_morph = await prisma.upload_file_morph.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends upload_file_morphUpdateManyArgs>(
      args: SelectSubset<T, upload_file_morphUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Upload_file_morph.
     * @param {upload_file_morphUpsertArgs} args - Arguments to update or create a Upload_file_morph.
     * @example
     * // Update or create a Upload_file_morph
     * const upload_file_morph = await prisma.upload_file_morph.upsert({
     *   create: {
     *     // ... data to create a Upload_file_morph
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Upload_file_morph we want to update
     *   }
     * })
    **/
    upsert<T extends upload_file_morphUpsertArgs>(
      args: SelectSubset<T, upload_file_morphUpsertArgs>
    ): CheckSelect<T, Prisma__upload_file_morphClient<upload_file_morph>, Prisma__upload_file_morphClient<upload_file_morphGetPayload<T>>>

    /**
     * Count the number of Upload_file_morphs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {upload_file_morphCountArgs} args - Arguments to filter Upload_file_morphs to count.
     * @example
     * // Count the number of Upload_file_morphs
     * const count = await prisma.upload_file_morph.count({
     *   where: {
     *     // ... the filter for the Upload_file_morphs we want to count
     *   }
     * })
    **/
    count<T extends upload_file_morphCountArgs>(
      args?: Subset<T, upload_file_morphCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Upload_file_morphCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Upload_file_morph.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Upload_file_morphAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Upload_file_morphAggregateArgs>(args: Subset<T, Upload_file_morphAggregateArgs>): PrismaPromise<GetUpload_file_morphAggregateType<T>>

    /**
     * Group by Upload_file_morph.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Upload_file_morphGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Upload_file_morphGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Upload_file_morphGroupByArgs['orderBy'] }
        : { orderBy?: Upload_file_morphGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Upload_file_morphGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUpload_file_morphGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for upload_file_morph.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__upload_file_morphClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    uploadFile<T extends upload_fileArgs = {}>(args?: Subset<T, upload_fileArgs>): CheckSelect<T, Prisma__upload_fileClient<upload_file | null >, Prisma__upload_fileClient<upload_fileGetPayload<T> | null >>;

    venues<T extends venuesArgs = {}>(args?: Subset<T, venuesArgs>): CheckSelect<T, Prisma__venuesClient<venues | null >, Prisma__venuesClient<venuesGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * upload_file_morph findUnique
   */
  export type upload_file_morphFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the upload_file_morph
     * 
    **/
    select?: upload_file_morphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_file_morphInclude | null
    /**
     * Throw an Error if a upload_file_morph can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which upload_file_morph to fetch.
     * 
    **/
    where: upload_file_morphWhereUniqueInput
  }


  /**
   * upload_file_morph findFirst
   */
  export type upload_file_morphFindFirstArgs = {
    /**
     * Select specific fields to fetch from the upload_file_morph
     * 
    **/
    select?: upload_file_morphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_file_morphInclude | null
    /**
     * Throw an Error if a upload_file_morph can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which upload_file_morph to fetch.
     * 
    **/
    where?: upload_file_morphWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of upload_file_morphs to fetch.
     * 
    **/
    orderBy?: Enumerable<upload_file_morphOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for upload_file_morphs.
     * 
    **/
    cursor?: upload_file_morphWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` upload_file_morphs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` upload_file_morphs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of upload_file_morphs.
     * 
    **/
    distinct?: Enumerable<Upload_file_morphScalarFieldEnum>
  }


  /**
   * upload_file_morph findMany
   */
  export type upload_file_morphFindManyArgs = {
    /**
     * Select specific fields to fetch from the upload_file_morph
     * 
    **/
    select?: upload_file_morphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_file_morphInclude | null
    /**
     * Filter, which upload_file_morphs to fetch.
     * 
    **/
    where?: upload_file_morphWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of upload_file_morphs to fetch.
     * 
    **/
    orderBy?: Enumerable<upload_file_morphOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing upload_file_morphs.
     * 
    **/
    cursor?: upload_file_morphWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` upload_file_morphs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` upload_file_morphs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Upload_file_morphScalarFieldEnum>
  }


  /**
   * upload_file_morph create
   */
  export type upload_file_morphCreateArgs = {
    /**
     * Select specific fields to fetch from the upload_file_morph
     * 
    **/
    select?: upload_file_morphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_file_morphInclude | null
    /**
     * The data needed to create a upload_file_morph.
     * 
    **/
    data: XOR<upload_file_morphCreateInput, upload_file_morphUncheckedCreateInput>
  }


  /**
   * upload_file_morph createMany
   */
  export type upload_file_morphCreateManyArgs = {
    data: Enumerable<upload_file_morphCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * upload_file_morph update
   */
  export type upload_file_morphUpdateArgs = {
    /**
     * Select specific fields to fetch from the upload_file_morph
     * 
    **/
    select?: upload_file_morphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_file_morphInclude | null
    /**
     * The data needed to update a upload_file_morph.
     * 
    **/
    data: XOR<upload_file_morphUpdateInput, upload_file_morphUncheckedUpdateInput>
    /**
     * Choose, which upload_file_morph to update.
     * 
    **/
    where: upload_file_morphWhereUniqueInput
  }


  /**
   * upload_file_morph updateMany
   */
  export type upload_file_morphUpdateManyArgs = {
    data: XOR<upload_file_morphUpdateManyMutationInput, upload_file_morphUncheckedUpdateManyInput>
    where?: upload_file_morphWhereInput
  }


  /**
   * upload_file_morph upsert
   */
  export type upload_file_morphUpsertArgs = {
    /**
     * Select specific fields to fetch from the upload_file_morph
     * 
    **/
    select?: upload_file_morphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_file_morphInclude | null
    /**
     * The filter to search for the upload_file_morph to update in case it exists.
     * 
    **/
    where: upload_file_morphWhereUniqueInput
    /**
     * In case the upload_file_morph found by the `where` argument doesn't exist, create a new upload_file_morph with this data.
     * 
    **/
    create: XOR<upload_file_morphCreateInput, upload_file_morphUncheckedCreateInput>
    /**
     * In case the upload_file_morph was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<upload_file_morphUpdateInput, upload_file_morphUncheckedUpdateInput>
  }


  /**
   * upload_file_morph delete
   */
  export type upload_file_morphDeleteArgs = {
    /**
     * Select specific fields to fetch from the upload_file_morph
     * 
    **/
    select?: upload_file_morphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_file_morphInclude | null
    /**
     * Filter which upload_file_morph to delete.
     * 
    **/
    where: upload_file_morphWhereUniqueInput
  }


  /**
   * upload_file_morph deleteMany
   */
  export type upload_file_morphDeleteManyArgs = {
    where?: upload_file_morphWhereInput
  }


  /**
   * upload_file_morph without action
   */
  export type upload_file_morphArgs = {
    /**
     * Select specific fields to fetch from the upload_file_morph
     * 
    **/
    select?: upload_file_morphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: upload_file_morphInclude | null
  }



  /**
   * Model venueType
   */


  export type AggregateVenueType = {
    _count: VenueTypeCountAggregateOutputType | null
    count: VenueTypeCountAggregateOutputType | null
    _avg: VenueTypeAvgAggregateOutputType | null
    avg: VenueTypeAvgAggregateOutputType | null
    _sum: VenueTypeSumAggregateOutputType | null
    sum: VenueTypeSumAggregateOutputType | null
    _min: VenueTypeMinAggregateOutputType | null
    min: VenueTypeMinAggregateOutputType | null
    _max: VenueTypeMaxAggregateOutputType | null
    max: VenueTypeMaxAggregateOutputType | null
  }

  export type VenueTypeAvgAggregateOutputType = {
    id: number | null
    created_by: number | null
    updated_by: number | null
  }

  export type VenueTypeSumAggregateOutputType = {
    id: number | null
    created_by: number | null
    updated_by: number | null
  }

  export type VenueTypeMinAggregateOutputType = {
    id: number | null
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
    name: string | null
  }

  export type VenueTypeMaxAggregateOutputType = {
    id: number | null
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
    name: string | null
  }

  export type VenueTypeCountAggregateOutputType = {
    id: number
    created_by: number
    updated_by: number
    created_at: number
    updated_at: number
    name: number
    _all: number
  }


  export type VenueTypeAvgAggregateInputType = {
    id?: true
    created_by?: true
    updated_by?: true
  }

  export type VenueTypeSumAggregateInputType = {
    id?: true
    created_by?: true
    updated_by?: true
  }

  export type VenueTypeMinAggregateInputType = {
    id?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
    name?: true
  }

  export type VenueTypeMaxAggregateInputType = {
    id?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
    name?: true
  }

  export type VenueTypeCountAggregateInputType = {
    id?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
    name?: true
    _all?: true
  }

  export type VenueTypeAggregateArgs = {
    /**
     * Filter which venueType to aggregate.
     * 
    **/
    where?: venueTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of venueTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<venueTypeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: venueTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` venueTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` venueTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned venueTypes
    **/
    _count?: true | VenueTypeCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | VenueTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VenueTypeAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: VenueTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VenueTypeSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: VenueTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VenueTypeMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: VenueTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VenueTypeMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: VenueTypeMaxAggregateInputType
  }

  export type GetVenueTypeAggregateType<T extends VenueTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateVenueType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenueType[P]>
      : GetScalarType<T[P], AggregateVenueType[P]>
  }


    
    
  export type VenueTypeGroupByArgs = {
    where?: venueTypeWhereInput
    orderBy?: Enumerable<venueTypeOrderByInput>
    by: Array<VenueTypeScalarFieldEnum>
    having?: venueTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VenueTypeCountAggregateInputType | true
    _avg?: VenueTypeAvgAggregateInputType
    _sum?: VenueTypeSumAggregateInputType
    _min?: VenueTypeMinAggregateInputType
    _max?: VenueTypeMaxAggregateInputType
  }


  export type VenueTypeGroupByOutputType = {
    id: number
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
    name: string | null
    _count: VenueTypeCountAggregateOutputType | null
    _avg: VenueTypeAvgAggregateOutputType | null
    _sum: VenueTypeSumAggregateOutputType | null
    _min: VenueTypeMinAggregateOutputType | null
    _max: VenueTypeMaxAggregateOutputType | null
  }

  type GetVenueTypeGroupByPayload<T extends VenueTypeGroupByArgs> = Promise<
    Array<
      PickArray<VenueTypeGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof VenueTypeGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], VenueTypeGroupByOutputType[P]> 
            : GetScalarType<T[P], VenueTypeGroupByOutputType[P]>
        }
      > 
    >


  export type venueTypeSelect = {
    id?: boolean
    created_by?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    name?: boolean
    venues?: boolean | venuesFindManyArgs
  }

  export type venueTypeInclude = {
    venues?: boolean | venuesFindManyArgs
  }

  export type venueTypeGetPayload<
    S extends boolean | null | undefined | venueTypeArgs,
    U = keyof S
      > = S extends true
        ? venueType
    : S extends undefined
    ? never
    : S extends venueTypeArgs | venueTypeFindManyArgs
    ?'include' extends U
    ? venueType  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'venues'
        ? Array < venuesGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof venueType ?venueType [P]
  : 
          P extends 'venues'
        ? Array < venuesGetPayload<S['select'][P]>>  : never
  } 
    : venueType
  : venueType


  type venueTypeCountArgs = Merge<
    Omit<venueTypeFindManyArgs, 'select' | 'include'> & {
      select?: VenueTypeCountAggregateInputType | true
    }
  >

  export interface venueTypeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one VenueType that matches the filter.
     * @param {venueTypeFindUniqueArgs} args - Arguments to find a VenueType
     * @example
     * // Get one VenueType
     * const venueType = await prisma.venueType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends venueTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, venueTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'venueType'> extends True ? CheckSelect<T, Prisma__venueTypeClient<venueType>, Prisma__venueTypeClient<venueTypeGetPayload<T>>> : CheckSelect<T, Prisma__venueTypeClient<venueType | null >, Prisma__venueTypeClient<venueTypeGetPayload<T> | null >>

    /**
     * Find the first VenueType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {venueTypeFindFirstArgs} args - Arguments to find a VenueType
     * @example
     * // Get one VenueType
     * const venueType = await prisma.venueType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends venueTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, venueTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'venueType'> extends True ? CheckSelect<T, Prisma__venueTypeClient<venueType>, Prisma__venueTypeClient<venueTypeGetPayload<T>>> : CheckSelect<T, Prisma__venueTypeClient<venueType | null >, Prisma__venueTypeClient<venueTypeGetPayload<T> | null >>

    /**
     * Find zero or more VenueTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {venueTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VenueTypes
     * const venueTypes = await prisma.venueType.findMany()
     * 
     * // Get first 10 VenueTypes
     * const venueTypes = await prisma.venueType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const venueTypeWithIdOnly = await prisma.venueType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends venueTypeFindManyArgs>(
      args?: SelectSubset<T, venueTypeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<venueType>>, PrismaPromise<Array<venueTypeGetPayload<T>>>>

    /**
     * Create a VenueType.
     * @param {venueTypeCreateArgs} args - Arguments to create a VenueType.
     * @example
     * // Create one VenueType
     * const VenueType = await prisma.venueType.create({
     *   data: {
     *     // ... data to create a VenueType
     *   }
     * })
     * 
    **/
    create<T extends venueTypeCreateArgs>(
      args: SelectSubset<T, venueTypeCreateArgs>
    ): CheckSelect<T, Prisma__venueTypeClient<venueType>, Prisma__venueTypeClient<venueTypeGetPayload<T>>>

    /**
     * Create many VenueTypes.
     *     @param {venueTypeCreateManyArgs} args - Arguments to create many VenueTypes.
     *     @example
     *     // Create many VenueTypes
     *     const venueType = await prisma.venueType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends venueTypeCreateManyArgs>(
      args?: SelectSubset<T, venueTypeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a VenueType.
     * @param {venueTypeDeleteArgs} args - Arguments to delete one VenueType.
     * @example
     * // Delete one VenueType
     * const VenueType = await prisma.venueType.delete({
     *   where: {
     *     // ... filter to delete one VenueType
     *   }
     * })
     * 
    **/
    delete<T extends venueTypeDeleteArgs>(
      args: SelectSubset<T, venueTypeDeleteArgs>
    ): CheckSelect<T, Prisma__venueTypeClient<venueType>, Prisma__venueTypeClient<venueTypeGetPayload<T>>>

    /**
     * Update one VenueType.
     * @param {venueTypeUpdateArgs} args - Arguments to update one VenueType.
     * @example
     * // Update one VenueType
     * const venueType = await prisma.venueType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends venueTypeUpdateArgs>(
      args: SelectSubset<T, venueTypeUpdateArgs>
    ): CheckSelect<T, Prisma__venueTypeClient<venueType>, Prisma__venueTypeClient<venueTypeGetPayload<T>>>

    /**
     * Delete zero or more VenueTypes.
     * @param {venueTypeDeleteManyArgs} args - Arguments to filter VenueTypes to delete.
     * @example
     * // Delete a few VenueTypes
     * const { count } = await prisma.venueType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends venueTypeDeleteManyArgs>(
      args?: SelectSubset<T, venueTypeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more VenueTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {venueTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VenueTypes
     * const venueType = await prisma.venueType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends venueTypeUpdateManyArgs>(
      args: SelectSubset<T, venueTypeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one VenueType.
     * @param {venueTypeUpsertArgs} args - Arguments to update or create a VenueType.
     * @example
     * // Update or create a VenueType
     * const venueType = await prisma.venueType.upsert({
     *   create: {
     *     // ... data to create a VenueType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VenueType we want to update
     *   }
     * })
    **/
    upsert<T extends venueTypeUpsertArgs>(
      args: SelectSubset<T, venueTypeUpsertArgs>
    ): CheckSelect<T, Prisma__venueTypeClient<venueType>, Prisma__venueTypeClient<venueTypeGetPayload<T>>>

    /**
     * Count the number of VenueTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {venueTypeCountArgs} args - Arguments to filter VenueTypes to count.
     * @example
     * // Count the number of VenueTypes
     * const count = await prisma.venueType.count({
     *   where: {
     *     // ... the filter for the VenueTypes we want to count
     *   }
     * })
    **/
    count<T extends venueTypeCountArgs>(
      args?: Subset<T, venueTypeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VenueTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VenueType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VenueTypeAggregateArgs>(args: Subset<T, VenueTypeAggregateArgs>): PrismaPromise<GetVenueTypeAggregateType<T>>

    /**
     * Group by VenueType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VenueTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VenueTypeGroupByArgs['orderBy'] }
        : { orderBy?: VenueTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VenueTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVenueTypeGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for venueType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__venueTypeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    venues<T extends venuesFindManyArgs = {}>(args?: Subset<T, venuesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<venues>>, PrismaPromise<Array<venuesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * venueType findUnique
   */
  export type venueTypeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the venueType
     * 
    **/
    select?: venueTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venueTypeInclude | null
    /**
     * Throw an Error if a venueType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which venueType to fetch.
     * 
    **/
    where: venueTypeWhereUniqueInput
  }


  /**
   * venueType findFirst
   */
  export type venueTypeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the venueType
     * 
    **/
    select?: venueTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venueTypeInclude | null
    /**
     * Throw an Error if a venueType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which venueType to fetch.
     * 
    **/
    where?: venueTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of venueTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<venueTypeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for venueTypes.
     * 
    **/
    cursor?: venueTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` venueTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` venueTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of venueTypes.
     * 
    **/
    distinct?: Enumerable<VenueTypeScalarFieldEnum>
  }


  /**
   * venueType findMany
   */
  export type venueTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the venueType
     * 
    **/
    select?: venueTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venueTypeInclude | null
    /**
     * Filter, which venueTypes to fetch.
     * 
    **/
    where?: venueTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of venueTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<venueTypeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing venueTypes.
     * 
    **/
    cursor?: venueTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` venueTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` venueTypes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VenueTypeScalarFieldEnum>
  }


  /**
   * venueType create
   */
  export type venueTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the venueType
     * 
    **/
    select?: venueTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venueTypeInclude | null
    /**
     * The data needed to create a venueType.
     * 
    **/
    data: XOR<venueTypeCreateInput, venueTypeUncheckedCreateInput>
  }


  /**
   * venueType createMany
   */
  export type venueTypeCreateManyArgs = {
    data: Enumerable<venueTypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * venueType update
   */
  export type venueTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the venueType
     * 
    **/
    select?: venueTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venueTypeInclude | null
    /**
     * The data needed to update a venueType.
     * 
    **/
    data: XOR<venueTypeUpdateInput, venueTypeUncheckedUpdateInput>
    /**
     * Choose, which venueType to update.
     * 
    **/
    where: venueTypeWhereUniqueInput
  }


  /**
   * venueType updateMany
   */
  export type venueTypeUpdateManyArgs = {
    data: XOR<venueTypeUpdateManyMutationInput, venueTypeUncheckedUpdateManyInput>
    where?: venueTypeWhereInput
  }


  /**
   * venueType upsert
   */
  export type venueTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the venueType
     * 
    **/
    select?: venueTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venueTypeInclude | null
    /**
     * The filter to search for the venueType to update in case it exists.
     * 
    **/
    where: venueTypeWhereUniqueInput
    /**
     * In case the venueType found by the `where` argument doesn't exist, create a new venueType with this data.
     * 
    **/
    create: XOR<venueTypeCreateInput, venueTypeUncheckedCreateInput>
    /**
     * In case the venueType was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<venueTypeUpdateInput, venueTypeUncheckedUpdateInput>
  }


  /**
   * venueType delete
   */
  export type venueTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the venueType
     * 
    **/
    select?: venueTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venueTypeInclude | null
    /**
     * Filter which venueType to delete.
     * 
    **/
    where: venueTypeWhereUniqueInput
  }


  /**
   * venueType deleteMany
   */
  export type venueTypeDeleteManyArgs = {
    where?: venueTypeWhereInput
  }


  /**
   * venueType without action
   */
  export type venueTypeArgs = {
    /**
     * Select specific fields to fetch from the venueType
     * 
    **/
    select?: venueTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venueTypeInclude | null
  }



  /**
   * Model venues
   */


  export type AggregateVenues = {
    _count: VenuesCountAggregateOutputType | null
    count: VenuesCountAggregateOutputType | null
    _avg: VenuesAvgAggregateOutputType | null
    avg: VenuesAvgAggregateOutputType | null
    _sum: VenuesSumAggregateOutputType | null
    sum: VenuesSumAggregateOutputType | null
    _min: VenuesMinAggregateOutputType | null
    min: VenuesMinAggregateOutputType | null
    _max: VenuesMaxAggregateOutputType | null
    max: VenuesMaxAggregateOutputType | null
  }

  export type VenuesAvgAggregateOutputType = {
    id: number | null
    lat: number | null
    lon: number | null
    venue_type: number | null
    created_by: number | null
    updated_by: number | null
  }

  export type VenuesSumAggregateOutputType = {
    id: number | null
    lat: number | null
    lon: number | null
    venue_type: number | null
    created_by: number | null
    updated_by: number | null
  }

  export type VenuesMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    address: string | null
    suburb: string | null
    city: string | null
    postCode: string | null
    lat: number | null
    lon: number | null
    website: string | null
    venue_type: number | null
    breakfast: boolean | null
    lunch: boolean | null
    dinner: boolean | null
    visible: boolean | null
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
    test: string | null
    cosy: boolean | null
    romantic: boolean | null
    weddings: boolean | null
    post_code: string | null
    bachelor_party: boolean | null
    hen_party: boolean | null
    outdoor_area: boolean | null
    outdoor_dinning: boolean | null
    outdoor_bar: boolean | null
  }

  export type VenuesMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    address: string | null
    suburb: string | null
    city: string | null
    postCode: string | null
    lat: number | null
    lon: number | null
    website: string | null
    venue_type: number | null
    breakfast: boolean | null
    lunch: boolean | null
    dinner: boolean | null
    visible: boolean | null
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
    test: string | null
    cosy: boolean | null
    romantic: boolean | null
    weddings: boolean | null
    post_code: string | null
    bachelor_party: boolean | null
    hen_party: boolean | null
    outdoor_area: boolean | null
    outdoor_dinning: boolean | null
    outdoor_bar: boolean | null
  }

  export type VenuesCountAggregateOutputType = {
    id: number
    title: number
    description: number
    address: number
    suburb: number
    city: number
    postCode: number
    lat: number
    lon: number
    website: number
    venue_type: number
    breakfast: number
    lunch: number
    dinner: number
    visible: number
    created_by: number
    updated_by: number
    created_at: number
    updated_at: number
    test: number
    cosy: number
    romantic: number
    weddings: number
    post_code: number
    bachelor_party: number
    hen_party: number
    outdoor_area: number
    outdoor_dinning: number
    outdoor_bar: number
    _all: number
  }


  export type VenuesAvgAggregateInputType = {
    id?: true
    lat?: true
    lon?: true
    venue_type?: true
    created_by?: true
    updated_by?: true
  }

  export type VenuesSumAggregateInputType = {
    id?: true
    lat?: true
    lon?: true
    venue_type?: true
    created_by?: true
    updated_by?: true
  }

  export type VenuesMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    address?: true
    suburb?: true
    city?: true
    postCode?: true
    lat?: true
    lon?: true
    website?: true
    venue_type?: true
    breakfast?: true
    lunch?: true
    dinner?: true
    visible?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
    test?: true
    cosy?: true
    romantic?: true
    weddings?: true
    post_code?: true
    bachelor_party?: true
    hen_party?: true
    outdoor_area?: true
    outdoor_dinning?: true
    outdoor_bar?: true
  }

  export type VenuesMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    address?: true
    suburb?: true
    city?: true
    postCode?: true
    lat?: true
    lon?: true
    website?: true
    venue_type?: true
    breakfast?: true
    lunch?: true
    dinner?: true
    visible?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
    test?: true
    cosy?: true
    romantic?: true
    weddings?: true
    post_code?: true
    bachelor_party?: true
    hen_party?: true
    outdoor_area?: true
    outdoor_dinning?: true
    outdoor_bar?: true
  }

  export type VenuesCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    address?: true
    suburb?: true
    city?: true
    postCode?: true
    lat?: true
    lon?: true
    website?: true
    venue_type?: true
    breakfast?: true
    lunch?: true
    dinner?: true
    visible?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
    test?: true
    cosy?: true
    romantic?: true
    weddings?: true
    post_code?: true
    bachelor_party?: true
    hen_party?: true
    outdoor_area?: true
    outdoor_dinning?: true
    outdoor_bar?: true
    _all?: true
  }

  export type VenuesAggregateArgs = {
    /**
     * Filter which venues to aggregate.
     * 
    **/
    where?: venuesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of venues to fetch.
     * 
    **/
    orderBy?: Enumerable<venuesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: venuesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` venues from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` venues.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned venues
    **/
    _count?: true | VenuesCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | VenuesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VenuesAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: VenuesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VenuesSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: VenuesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VenuesMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: VenuesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VenuesMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: VenuesMaxAggregateInputType
  }

  export type GetVenuesAggregateType<T extends VenuesAggregateArgs> = {
        [P in keyof T & keyof AggregateVenues]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenues[P]>
      : GetScalarType<T[P], AggregateVenues[P]>
  }


    
    
  export type VenuesGroupByArgs = {
    where?: venuesWhereInput
    orderBy?: Enumerable<venuesOrderByInput>
    by: Array<VenuesScalarFieldEnum>
    having?: venuesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VenuesCountAggregateInputType | true
    _avg?: VenuesAvgAggregateInputType
    _sum?: VenuesSumAggregateInputType
    _min?: VenuesMinAggregateInputType
    _max?: VenuesMaxAggregateInputType
  }


  export type VenuesGroupByOutputType = {
    id: number
    title: string | null
    description: string | null
    address: string | null
    suburb: string | null
    city: string | null
    postCode: string | null
    lat: number | null
    lon: number | null
    website: string | null
    venue_type: number | null
    breakfast: boolean | null
    lunch: boolean | null
    dinner: boolean | null
    visible: boolean | null
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
    test: string | null
    cosy: boolean | null
    romantic: boolean | null
    weddings: boolean | null
    post_code: string | null
    bachelor_party: boolean | null
    hen_party: boolean | null
    outdoor_area: boolean | null
    outdoor_dinning: boolean | null
    outdoor_bar: boolean | null
    _count: VenuesCountAggregateOutputType | null
    _avg: VenuesAvgAggregateOutputType | null
    _sum: VenuesSumAggregateOutputType | null
    _min: VenuesMinAggregateOutputType | null
    _max: VenuesMaxAggregateOutputType | null
  }

  type GetVenuesGroupByPayload<T extends VenuesGroupByArgs> = Promise<
    Array<
      PickArray<VenuesGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof VenuesGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], VenuesGroupByOutputType[P]> 
            : GetScalarType<T[P], VenuesGroupByOutputType[P]>
        }
      > 
    >


  export type venuesSelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    address?: boolean
    suburb?: boolean
    city?: boolean
    postCode?: boolean
    lat?: boolean
    lon?: boolean
    website?: boolean
    venue_type?: boolean
    breakfast?: boolean
    lunch?: boolean
    dinner?: boolean
    visible?: boolean
    created_by?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    test?: boolean
    cosy?: boolean
    romantic?: boolean
    weddings?: boolean
    post_code?: boolean
    bachelor_party?: boolean
    hen_party?: boolean
    outdoor_area?: boolean
    outdoor_dinning?: boolean
    outdoor_bar?: boolean
    venueType?: boolean | venueTypeArgs
    uploadFileMorph?: boolean | upload_file_morphFindManyArgs
  }

  export type venuesInclude = {
    venueType?: boolean | venueTypeArgs
    uploadFileMorph?: boolean | upload_file_morphFindManyArgs
  }

  export type venuesGetPayload<
    S extends boolean | null | undefined | venuesArgs,
    U = keyof S
      > = S extends true
        ? venues
    : S extends undefined
    ? never
    : S extends venuesArgs | venuesFindManyArgs
    ?'include' extends U
    ? venues  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'venueType'
        ? venueTypeGetPayload<S['include'][P]> | null :
        P extends 'uploadFileMorph'
        ? Array < upload_file_morphGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof venues ?venues [P]
  : 
          P extends 'venueType'
        ? venueTypeGetPayload<S['select'][P]> | null :
        P extends 'uploadFileMorph'
        ? Array < upload_file_morphGetPayload<S['select'][P]>>  : never
  } 
    : venues
  : venues


  type venuesCountArgs = Merge<
    Omit<venuesFindManyArgs, 'select' | 'include'> & {
      select?: VenuesCountAggregateInputType | true
    }
  >

  export interface venuesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Venues that matches the filter.
     * @param {venuesFindUniqueArgs} args - Arguments to find a Venues
     * @example
     * // Get one Venues
     * const venues = await prisma.venues.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends venuesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, venuesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'venues'> extends True ? CheckSelect<T, Prisma__venuesClient<venues>, Prisma__venuesClient<venuesGetPayload<T>>> : CheckSelect<T, Prisma__venuesClient<venues | null >, Prisma__venuesClient<venuesGetPayload<T> | null >>

    /**
     * Find the first Venues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {venuesFindFirstArgs} args - Arguments to find a Venues
     * @example
     * // Get one Venues
     * const venues = await prisma.venues.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends venuesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, venuesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'venues'> extends True ? CheckSelect<T, Prisma__venuesClient<venues>, Prisma__venuesClient<venuesGetPayload<T>>> : CheckSelect<T, Prisma__venuesClient<venues | null >, Prisma__venuesClient<venuesGetPayload<T> | null >>

    /**
     * Find zero or more Venues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {venuesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Venues
     * const venues = await prisma.venues.findMany()
     * 
     * // Get first 10 Venues
     * const venues = await prisma.venues.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const venuesWithIdOnly = await prisma.venues.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends venuesFindManyArgs>(
      args?: SelectSubset<T, venuesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<venues>>, PrismaPromise<Array<venuesGetPayload<T>>>>

    /**
     * Create a Venues.
     * @param {venuesCreateArgs} args - Arguments to create a Venues.
     * @example
     * // Create one Venues
     * const Venues = await prisma.venues.create({
     *   data: {
     *     // ... data to create a Venues
     *   }
     * })
     * 
    **/
    create<T extends venuesCreateArgs>(
      args: SelectSubset<T, venuesCreateArgs>
    ): CheckSelect<T, Prisma__venuesClient<venues>, Prisma__venuesClient<venuesGetPayload<T>>>

    /**
     * Create many Venues.
     *     @param {venuesCreateManyArgs} args - Arguments to create many Venues.
     *     @example
     *     // Create many Venues
     *     const venues = await prisma.venues.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends venuesCreateManyArgs>(
      args?: SelectSubset<T, venuesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Venues.
     * @param {venuesDeleteArgs} args - Arguments to delete one Venues.
     * @example
     * // Delete one Venues
     * const Venues = await prisma.venues.delete({
     *   where: {
     *     // ... filter to delete one Venues
     *   }
     * })
     * 
    **/
    delete<T extends venuesDeleteArgs>(
      args: SelectSubset<T, venuesDeleteArgs>
    ): CheckSelect<T, Prisma__venuesClient<venues>, Prisma__venuesClient<venuesGetPayload<T>>>

    /**
     * Update one Venues.
     * @param {venuesUpdateArgs} args - Arguments to update one Venues.
     * @example
     * // Update one Venues
     * const venues = await prisma.venues.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends venuesUpdateArgs>(
      args: SelectSubset<T, venuesUpdateArgs>
    ): CheckSelect<T, Prisma__venuesClient<venues>, Prisma__venuesClient<venuesGetPayload<T>>>

    /**
     * Delete zero or more Venues.
     * @param {venuesDeleteManyArgs} args - Arguments to filter Venues to delete.
     * @example
     * // Delete a few Venues
     * const { count } = await prisma.venues.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends venuesDeleteManyArgs>(
      args?: SelectSubset<T, venuesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Venues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {venuesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Venues
     * const venues = await prisma.venues.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends venuesUpdateManyArgs>(
      args: SelectSubset<T, venuesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Venues.
     * @param {venuesUpsertArgs} args - Arguments to update or create a Venues.
     * @example
     * // Update or create a Venues
     * const venues = await prisma.venues.upsert({
     *   create: {
     *     // ... data to create a Venues
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Venues we want to update
     *   }
     * })
    **/
    upsert<T extends venuesUpsertArgs>(
      args: SelectSubset<T, venuesUpsertArgs>
    ): CheckSelect<T, Prisma__venuesClient<venues>, Prisma__venuesClient<venuesGetPayload<T>>>

    /**
     * Count the number of Venues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {venuesCountArgs} args - Arguments to filter Venues to count.
     * @example
     * // Count the number of Venues
     * const count = await prisma.venues.count({
     *   where: {
     *     // ... the filter for the Venues we want to count
     *   }
     * })
    **/
    count<T extends venuesCountArgs>(
      args?: Subset<T, venuesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VenuesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Venues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenuesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VenuesAggregateArgs>(args: Subset<T, VenuesAggregateArgs>): PrismaPromise<GetVenuesAggregateType<T>>

    /**
     * Group by Venues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenuesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VenuesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VenuesGroupByArgs['orderBy'] }
        : { orderBy?: VenuesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VenuesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVenuesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for venues.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__venuesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    venueType<T extends venueTypeArgs = {}>(args?: Subset<T, venueTypeArgs>): CheckSelect<T, Prisma__venueTypeClient<venueType | null >, Prisma__venueTypeClient<venueTypeGetPayload<T> | null >>;

    uploadFileMorph<T extends upload_file_morphFindManyArgs = {}>(args?: Subset<T, upload_file_morphFindManyArgs>): CheckSelect<T, PrismaPromise<Array<upload_file_morph>>, PrismaPromise<Array<upload_file_morphGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * venues findUnique
   */
  export type venuesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the venues
     * 
    **/
    select?: venuesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venuesInclude | null
    /**
     * Throw an Error if a venues can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which venues to fetch.
     * 
    **/
    where: venuesWhereUniqueInput
  }


  /**
   * venues findFirst
   */
  export type venuesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the venues
     * 
    **/
    select?: venuesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venuesInclude | null
    /**
     * Throw an Error if a venues can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which venues to fetch.
     * 
    **/
    where?: venuesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of venues to fetch.
     * 
    **/
    orderBy?: Enumerable<venuesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for venues.
     * 
    **/
    cursor?: venuesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` venues from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` venues.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of venues.
     * 
    **/
    distinct?: Enumerable<VenuesScalarFieldEnum>
  }


  /**
   * venues findMany
   */
  export type venuesFindManyArgs = {
    /**
     * Select specific fields to fetch from the venues
     * 
    **/
    select?: venuesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venuesInclude | null
    /**
     * Filter, which venues to fetch.
     * 
    **/
    where?: venuesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of venues to fetch.
     * 
    **/
    orderBy?: Enumerable<venuesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing venues.
     * 
    **/
    cursor?: venuesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` venues from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` venues.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VenuesScalarFieldEnum>
  }


  /**
   * venues create
   */
  export type venuesCreateArgs = {
    /**
     * Select specific fields to fetch from the venues
     * 
    **/
    select?: venuesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venuesInclude | null
    /**
     * The data needed to create a venues.
     * 
    **/
    data: XOR<venuesCreateInput, venuesUncheckedCreateInput>
  }


  /**
   * venues createMany
   */
  export type venuesCreateManyArgs = {
    data: Enumerable<venuesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * venues update
   */
  export type venuesUpdateArgs = {
    /**
     * Select specific fields to fetch from the venues
     * 
    **/
    select?: venuesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venuesInclude | null
    /**
     * The data needed to update a venues.
     * 
    **/
    data: XOR<venuesUpdateInput, venuesUncheckedUpdateInput>
    /**
     * Choose, which venues to update.
     * 
    **/
    where: venuesWhereUniqueInput
  }


  /**
   * venues updateMany
   */
  export type venuesUpdateManyArgs = {
    data: XOR<venuesUpdateManyMutationInput, venuesUncheckedUpdateManyInput>
    where?: venuesWhereInput
  }


  /**
   * venues upsert
   */
  export type venuesUpsertArgs = {
    /**
     * Select specific fields to fetch from the venues
     * 
    **/
    select?: venuesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venuesInclude | null
    /**
     * The filter to search for the venues to update in case it exists.
     * 
    **/
    where: venuesWhereUniqueInput
    /**
     * In case the venues found by the `where` argument doesn't exist, create a new venues with this data.
     * 
    **/
    create: XOR<venuesCreateInput, venuesUncheckedCreateInput>
    /**
     * In case the venues was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<venuesUpdateInput, venuesUncheckedUpdateInput>
  }


  /**
   * venues delete
   */
  export type venuesDeleteArgs = {
    /**
     * Select specific fields to fetch from the venues
     * 
    **/
    select?: venuesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venuesInclude | null
    /**
     * Filter which venues to delete.
     * 
    **/
    where: venuesWhereUniqueInput
  }


  /**
   * venues deleteMany
   */
  export type venuesDeleteManyArgs = {
    where?: venuesWhereInput
  }


  /**
   * venues without action
   */
  export type venuesArgs = {
    /**
     * Select specific fields to fetch from the venues
     * 
    **/
    select?: venuesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: venuesInclude | null
  }



  /**
   * Model itinerary
   */


  export type AggregateItinerary = {
    _count: ItineraryCountAggregateOutputType | null
    count: ItineraryCountAggregateOutputType | null
    _avg: ItineraryAvgAggregateOutputType | null
    avg: ItineraryAvgAggregateOutputType | null
    _sum: ItinerarySumAggregateOutputType | null
    sum: ItinerarySumAggregateOutputType | null
    _min: ItineraryMinAggregateOutputType | null
    min: ItineraryMinAggregateOutputType | null
    _max: ItineraryMaxAggregateOutputType | null
    max: ItineraryMaxAggregateOutputType | null
  }

  export type ItineraryAvgAggregateOutputType = {
    id: number | null
    created_by: number | null
    updated_by: number | null
  }

  export type ItinerarySumAggregateOutputType = {
    id: number | null
    created_by: number | null
    updated_by: number | null
  }

  export type ItineraryMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    itinerary_date: Date | null
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ItineraryMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    itinerary_date: Date | null
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ItineraryCountAggregateOutputType = {
    id: number
    user_id: number
    itinerary_date: number
    created_by: number
    updated_by: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ItineraryAvgAggregateInputType = {
    id?: true
    created_by?: true
    updated_by?: true
  }

  export type ItinerarySumAggregateInputType = {
    id?: true
    created_by?: true
    updated_by?: true
  }

  export type ItineraryMinAggregateInputType = {
    id?: true
    user_id?: true
    itinerary_date?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
  }

  export type ItineraryMaxAggregateInputType = {
    id?: true
    user_id?: true
    itinerary_date?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
  }

  export type ItineraryCountAggregateInputType = {
    id?: true
    user_id?: true
    itinerary_date?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ItineraryAggregateArgs = {
    /**
     * Filter which itinerary to aggregate.
     * 
    **/
    where?: itineraryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of itineraries to fetch.
     * 
    **/
    orderBy?: Enumerable<itineraryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: itineraryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` itineraries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` itineraries.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned itineraries
    **/
    _count?: true | ItineraryCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | ItineraryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItineraryAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: ItineraryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItinerarySumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: ItinerarySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItineraryMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: ItineraryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItineraryMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: ItineraryMaxAggregateInputType
  }

  export type GetItineraryAggregateType<T extends ItineraryAggregateArgs> = {
        [P in keyof T & keyof AggregateItinerary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItinerary[P]>
      : GetScalarType<T[P], AggregateItinerary[P]>
  }


    
    
  export type ItineraryGroupByArgs = {
    where?: itineraryWhereInput
    orderBy?: Enumerable<itineraryOrderByInput>
    by: Array<ItineraryScalarFieldEnum>
    having?: itineraryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItineraryCountAggregateInputType | true
    _avg?: ItineraryAvgAggregateInputType
    _sum?: ItinerarySumAggregateInputType
    _min?: ItineraryMinAggregateInputType
    _max?: ItineraryMaxAggregateInputType
  }


  export type ItineraryGroupByOutputType = {
    id: number
    user_id: string | null
    itinerary_date: Date | null
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
    _count: ItineraryCountAggregateOutputType | null
    _avg: ItineraryAvgAggregateOutputType | null
    _sum: ItinerarySumAggregateOutputType | null
    _min: ItineraryMinAggregateOutputType | null
    _max: ItineraryMaxAggregateOutputType | null
  }

  type GetItineraryGroupByPayload<T extends ItineraryGroupByArgs> = Promise<
    Array<
      PickArray<ItineraryGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof ItineraryGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], ItineraryGroupByOutputType[P]> 
            : GetScalarType<T[P], ItineraryGroupByOutputType[P]>
        }
      > 
    >


  export type itinerarySelect = {
    id?: boolean
    user_id?: boolean
    itinerary_date?: boolean
    created_by?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    places?: boolean | itinerary_placesFindManyArgs
  }

  export type itineraryInclude = {
    places?: boolean | itinerary_placesFindManyArgs
  }

  export type itineraryGetPayload<
    S extends boolean | null | undefined | itineraryArgs,
    U = keyof S
      > = S extends true
        ? itinerary
    : S extends undefined
    ? never
    : S extends itineraryArgs | itineraryFindManyArgs
    ?'include' extends U
    ? itinerary  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'places'
        ? Array < itinerary_placesGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof itinerary ?itinerary [P]
  : 
          P extends 'places'
        ? Array < itinerary_placesGetPayload<S['select'][P]>>  : never
  } 
    : itinerary
  : itinerary


  type itineraryCountArgs = Merge<
    Omit<itineraryFindManyArgs, 'select' | 'include'> & {
      select?: ItineraryCountAggregateInputType | true
    }
  >

  export interface itineraryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Itinerary that matches the filter.
     * @param {itineraryFindUniqueArgs} args - Arguments to find a Itinerary
     * @example
     * // Get one Itinerary
     * const itinerary = await prisma.itinerary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends itineraryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, itineraryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'itinerary'> extends True ? CheckSelect<T, Prisma__itineraryClient<itinerary>, Prisma__itineraryClient<itineraryGetPayload<T>>> : CheckSelect<T, Prisma__itineraryClient<itinerary | null >, Prisma__itineraryClient<itineraryGetPayload<T> | null >>

    /**
     * Find the first Itinerary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itineraryFindFirstArgs} args - Arguments to find a Itinerary
     * @example
     * // Get one Itinerary
     * const itinerary = await prisma.itinerary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends itineraryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, itineraryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'itinerary'> extends True ? CheckSelect<T, Prisma__itineraryClient<itinerary>, Prisma__itineraryClient<itineraryGetPayload<T>>> : CheckSelect<T, Prisma__itineraryClient<itinerary | null >, Prisma__itineraryClient<itineraryGetPayload<T> | null >>

    /**
     * Find zero or more Itineraries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itineraryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Itineraries
     * const itineraries = await prisma.itinerary.findMany()
     * 
     * // Get first 10 Itineraries
     * const itineraries = await prisma.itinerary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itineraryWithIdOnly = await prisma.itinerary.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends itineraryFindManyArgs>(
      args?: SelectSubset<T, itineraryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<itinerary>>, PrismaPromise<Array<itineraryGetPayload<T>>>>

    /**
     * Create a Itinerary.
     * @param {itineraryCreateArgs} args - Arguments to create a Itinerary.
     * @example
     * // Create one Itinerary
     * const Itinerary = await prisma.itinerary.create({
     *   data: {
     *     // ... data to create a Itinerary
     *   }
     * })
     * 
    **/
    create<T extends itineraryCreateArgs>(
      args: SelectSubset<T, itineraryCreateArgs>
    ): CheckSelect<T, Prisma__itineraryClient<itinerary>, Prisma__itineraryClient<itineraryGetPayload<T>>>

    /**
     * Create many Itineraries.
     *     @param {itineraryCreateManyArgs} args - Arguments to create many Itineraries.
     *     @example
     *     // Create many Itineraries
     *     const itinerary = await prisma.itinerary.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends itineraryCreateManyArgs>(
      args?: SelectSubset<T, itineraryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Itinerary.
     * @param {itineraryDeleteArgs} args - Arguments to delete one Itinerary.
     * @example
     * // Delete one Itinerary
     * const Itinerary = await prisma.itinerary.delete({
     *   where: {
     *     // ... filter to delete one Itinerary
     *   }
     * })
     * 
    **/
    delete<T extends itineraryDeleteArgs>(
      args: SelectSubset<T, itineraryDeleteArgs>
    ): CheckSelect<T, Prisma__itineraryClient<itinerary>, Prisma__itineraryClient<itineraryGetPayload<T>>>

    /**
     * Update one Itinerary.
     * @param {itineraryUpdateArgs} args - Arguments to update one Itinerary.
     * @example
     * // Update one Itinerary
     * const itinerary = await prisma.itinerary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends itineraryUpdateArgs>(
      args: SelectSubset<T, itineraryUpdateArgs>
    ): CheckSelect<T, Prisma__itineraryClient<itinerary>, Prisma__itineraryClient<itineraryGetPayload<T>>>

    /**
     * Delete zero or more Itineraries.
     * @param {itineraryDeleteManyArgs} args - Arguments to filter Itineraries to delete.
     * @example
     * // Delete a few Itineraries
     * const { count } = await prisma.itinerary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends itineraryDeleteManyArgs>(
      args?: SelectSubset<T, itineraryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Itineraries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itineraryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Itineraries
     * const itinerary = await prisma.itinerary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends itineraryUpdateManyArgs>(
      args: SelectSubset<T, itineraryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Itinerary.
     * @param {itineraryUpsertArgs} args - Arguments to update or create a Itinerary.
     * @example
     * // Update or create a Itinerary
     * const itinerary = await prisma.itinerary.upsert({
     *   create: {
     *     // ... data to create a Itinerary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Itinerary we want to update
     *   }
     * })
    **/
    upsert<T extends itineraryUpsertArgs>(
      args: SelectSubset<T, itineraryUpsertArgs>
    ): CheckSelect<T, Prisma__itineraryClient<itinerary>, Prisma__itineraryClient<itineraryGetPayload<T>>>

    /**
     * Count the number of Itineraries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itineraryCountArgs} args - Arguments to filter Itineraries to count.
     * @example
     * // Count the number of Itineraries
     * const count = await prisma.itinerary.count({
     *   where: {
     *     // ... the filter for the Itineraries we want to count
     *   }
     * })
    **/
    count<T extends itineraryCountArgs>(
      args?: Subset<T, itineraryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItineraryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Itinerary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItineraryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItineraryAggregateArgs>(args: Subset<T, ItineraryAggregateArgs>): PrismaPromise<GetItineraryAggregateType<T>>

    /**
     * Group by Itinerary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItineraryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItineraryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItineraryGroupByArgs['orderBy'] }
        : { orderBy?: ItineraryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItineraryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItineraryGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for itinerary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__itineraryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    places<T extends itinerary_placesFindManyArgs = {}>(args?: Subset<T, itinerary_placesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<itinerary_places>>, PrismaPromise<Array<itinerary_placesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * itinerary findUnique
   */
  export type itineraryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the itinerary
     * 
    **/
    select?: itinerarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itineraryInclude | null
    /**
     * Throw an Error if a itinerary can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which itinerary to fetch.
     * 
    **/
    where: itineraryWhereUniqueInput
  }


  /**
   * itinerary findFirst
   */
  export type itineraryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the itinerary
     * 
    **/
    select?: itinerarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itineraryInclude | null
    /**
     * Throw an Error if a itinerary can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which itinerary to fetch.
     * 
    **/
    where?: itineraryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of itineraries to fetch.
     * 
    **/
    orderBy?: Enumerable<itineraryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for itineraries.
     * 
    **/
    cursor?: itineraryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` itineraries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` itineraries.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of itineraries.
     * 
    **/
    distinct?: Enumerable<ItineraryScalarFieldEnum>
  }


  /**
   * itinerary findMany
   */
  export type itineraryFindManyArgs = {
    /**
     * Select specific fields to fetch from the itinerary
     * 
    **/
    select?: itinerarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itineraryInclude | null
    /**
     * Filter, which itineraries to fetch.
     * 
    **/
    where?: itineraryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of itineraries to fetch.
     * 
    **/
    orderBy?: Enumerable<itineraryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing itineraries.
     * 
    **/
    cursor?: itineraryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` itineraries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` itineraries.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ItineraryScalarFieldEnum>
  }


  /**
   * itinerary create
   */
  export type itineraryCreateArgs = {
    /**
     * Select specific fields to fetch from the itinerary
     * 
    **/
    select?: itinerarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itineraryInclude | null
    /**
     * The data needed to create a itinerary.
     * 
    **/
    data: XOR<itineraryCreateInput, itineraryUncheckedCreateInput>
  }


  /**
   * itinerary createMany
   */
  export type itineraryCreateManyArgs = {
    data: Enumerable<itineraryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * itinerary update
   */
  export type itineraryUpdateArgs = {
    /**
     * Select specific fields to fetch from the itinerary
     * 
    **/
    select?: itinerarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itineraryInclude | null
    /**
     * The data needed to update a itinerary.
     * 
    **/
    data: XOR<itineraryUpdateInput, itineraryUncheckedUpdateInput>
    /**
     * Choose, which itinerary to update.
     * 
    **/
    where: itineraryWhereUniqueInput
  }


  /**
   * itinerary updateMany
   */
  export type itineraryUpdateManyArgs = {
    data: XOR<itineraryUpdateManyMutationInput, itineraryUncheckedUpdateManyInput>
    where?: itineraryWhereInput
  }


  /**
   * itinerary upsert
   */
  export type itineraryUpsertArgs = {
    /**
     * Select specific fields to fetch from the itinerary
     * 
    **/
    select?: itinerarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itineraryInclude | null
    /**
     * The filter to search for the itinerary to update in case it exists.
     * 
    **/
    where: itineraryWhereUniqueInput
    /**
     * In case the itinerary found by the `where` argument doesn't exist, create a new itinerary with this data.
     * 
    **/
    create: XOR<itineraryCreateInput, itineraryUncheckedCreateInput>
    /**
     * In case the itinerary was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<itineraryUpdateInput, itineraryUncheckedUpdateInput>
  }


  /**
   * itinerary delete
   */
  export type itineraryDeleteArgs = {
    /**
     * Select specific fields to fetch from the itinerary
     * 
    **/
    select?: itinerarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itineraryInclude | null
    /**
     * Filter which itinerary to delete.
     * 
    **/
    where: itineraryWhereUniqueInput
  }


  /**
   * itinerary deleteMany
   */
  export type itineraryDeleteManyArgs = {
    where?: itineraryWhereInput
  }


  /**
   * itinerary without action
   */
  export type itineraryArgs = {
    /**
     * Select specific fields to fetch from the itinerary
     * 
    **/
    select?: itinerarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itineraryInclude | null
  }



  /**
   * Model itinerary_places
   */


  export type AggregateItinerary_places = {
    _count: Itinerary_placesCountAggregateOutputType | null
    count: Itinerary_placesCountAggregateOutputType | null
    _avg: Itinerary_placesAvgAggregateOutputType | null
    avg: Itinerary_placesAvgAggregateOutputType | null
    _sum: Itinerary_placesSumAggregateOutputType | null
    sum: Itinerary_placesSumAggregateOutputType | null
    _min: Itinerary_placesMinAggregateOutputType | null
    min: Itinerary_placesMinAggregateOutputType | null
    _max: Itinerary_placesMaxAggregateOutputType | null
    max: Itinerary_placesMaxAggregateOutputType | null
  }

  export type Itinerary_placesAvgAggregateOutputType = {
    id: number | null
    itinerary_id: number | null
    created_by: number | null
    updated_by: number | null
  }

  export type Itinerary_placesSumAggregateOutputType = {
    id: number | null
    itinerary_id: number | null
    created_by: number | null
    updated_by: number | null
  }

  export type Itinerary_placesMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    itinerary_id: number | null
    date: Date | null
    time: Date | null
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Itinerary_placesMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    itinerary_id: number | null
    date: Date | null
    time: Date | null
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Itinerary_placesCountAggregateOutputType = {
    id: number
    user_id: number
    itinerary_id: number
    venue_data: number
    date: number
    time: number
    created_by: number
    updated_by: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Itinerary_placesAvgAggregateInputType = {
    id?: true
    itinerary_id?: true
    created_by?: true
    updated_by?: true
  }

  export type Itinerary_placesSumAggregateInputType = {
    id?: true
    itinerary_id?: true
    created_by?: true
    updated_by?: true
  }

  export type Itinerary_placesMinAggregateInputType = {
    id?: true
    user_id?: true
    itinerary_id?: true
    date?: true
    time?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
  }

  export type Itinerary_placesMaxAggregateInputType = {
    id?: true
    user_id?: true
    itinerary_id?: true
    date?: true
    time?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
  }

  export type Itinerary_placesCountAggregateInputType = {
    id?: true
    user_id?: true
    itinerary_id?: true
    venue_data?: true
    date?: true
    time?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Itinerary_placesAggregateArgs = {
    /**
     * Filter which itinerary_places to aggregate.
     * 
    **/
    where?: itinerary_placesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of itinerary_places to fetch.
     * 
    **/
    orderBy?: Enumerable<itinerary_placesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: itinerary_placesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` itinerary_places from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` itinerary_places.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned itinerary_places
    **/
    _count?: true | Itinerary_placesCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | Itinerary_placesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Itinerary_placesAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: Itinerary_placesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Itinerary_placesSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: Itinerary_placesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Itinerary_placesMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: Itinerary_placesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Itinerary_placesMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: Itinerary_placesMaxAggregateInputType
  }

  export type GetItinerary_placesAggregateType<T extends Itinerary_placesAggregateArgs> = {
        [P in keyof T & keyof AggregateItinerary_places]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItinerary_places[P]>
      : GetScalarType<T[P], AggregateItinerary_places[P]>
  }


    
    
  export type Itinerary_placesGroupByArgs = {
    where?: itinerary_placesWhereInput
    orderBy?: Enumerable<itinerary_placesOrderByInput>
    by: Array<Itinerary_placesScalarFieldEnum>
    having?: itinerary_placesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Itinerary_placesCountAggregateInputType | true
    _avg?: Itinerary_placesAvgAggregateInputType
    _sum?: Itinerary_placesSumAggregateInputType
    _min?: Itinerary_placesMinAggregateInputType
    _max?: Itinerary_placesMaxAggregateInputType
  }


  export type Itinerary_placesGroupByOutputType = {
    id: number
    user_id: string | null
    itinerary_id: number | null
    venue_data: JsonValue | null
    date: Date | null
    time: Date | null
    created_by: number | null
    updated_by: number | null
    created_at: Date | null
    updated_at: Date | null
    _count: Itinerary_placesCountAggregateOutputType | null
    _avg: Itinerary_placesAvgAggregateOutputType | null
    _sum: Itinerary_placesSumAggregateOutputType | null
    _min: Itinerary_placesMinAggregateOutputType | null
    _max: Itinerary_placesMaxAggregateOutputType | null
  }

  type GetItinerary_placesGroupByPayload<T extends Itinerary_placesGroupByArgs> = Promise<
    Array<
      PickArray<Itinerary_placesGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Itinerary_placesGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Itinerary_placesGroupByOutputType[P]> 
            : GetScalarType<T[P], Itinerary_placesGroupByOutputType[P]>
        }
      > 
    >


  export type itinerary_placesSelect = {
    id?: boolean
    user_id?: boolean
    itinerary_id?: boolean
    venue_data?: boolean
    date?: boolean
    time?: boolean
    created_by?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    itinerary?: boolean | itineraryArgs
  }

  export type itinerary_placesInclude = {
    itinerary?: boolean | itineraryArgs
  }

  export type itinerary_placesGetPayload<
    S extends boolean | null | undefined | itinerary_placesArgs,
    U = keyof S
      > = S extends true
        ? itinerary_places
    : S extends undefined
    ? never
    : S extends itinerary_placesArgs | itinerary_placesFindManyArgs
    ?'include' extends U
    ? itinerary_places  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'itinerary'
        ? itineraryGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof itinerary_places ?itinerary_places [P]
  : 
          P extends 'itinerary'
        ? itineraryGetPayload<S['select'][P]> | null : never
  } 
    : itinerary_places
  : itinerary_places


  type itinerary_placesCountArgs = Merge<
    Omit<itinerary_placesFindManyArgs, 'select' | 'include'> & {
      select?: Itinerary_placesCountAggregateInputType | true
    }
  >

  export interface itinerary_placesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Itinerary_places that matches the filter.
     * @param {itinerary_placesFindUniqueArgs} args - Arguments to find a Itinerary_places
     * @example
     * // Get one Itinerary_places
     * const itinerary_places = await prisma.itinerary_places.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends itinerary_placesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, itinerary_placesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'itinerary_places'> extends True ? CheckSelect<T, Prisma__itinerary_placesClient<itinerary_places>, Prisma__itinerary_placesClient<itinerary_placesGetPayload<T>>> : CheckSelect<T, Prisma__itinerary_placesClient<itinerary_places | null >, Prisma__itinerary_placesClient<itinerary_placesGetPayload<T> | null >>

    /**
     * Find the first Itinerary_places that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itinerary_placesFindFirstArgs} args - Arguments to find a Itinerary_places
     * @example
     * // Get one Itinerary_places
     * const itinerary_places = await prisma.itinerary_places.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends itinerary_placesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, itinerary_placesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'itinerary_places'> extends True ? CheckSelect<T, Prisma__itinerary_placesClient<itinerary_places>, Prisma__itinerary_placesClient<itinerary_placesGetPayload<T>>> : CheckSelect<T, Prisma__itinerary_placesClient<itinerary_places | null >, Prisma__itinerary_placesClient<itinerary_placesGetPayload<T> | null >>

    /**
     * Find zero or more Itinerary_places that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itinerary_placesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Itinerary_places
     * const itinerary_places = await prisma.itinerary_places.findMany()
     * 
     * // Get first 10 Itinerary_places
     * const itinerary_places = await prisma.itinerary_places.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itinerary_placesWithIdOnly = await prisma.itinerary_places.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends itinerary_placesFindManyArgs>(
      args?: SelectSubset<T, itinerary_placesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<itinerary_places>>, PrismaPromise<Array<itinerary_placesGetPayload<T>>>>

    /**
     * Create a Itinerary_places.
     * @param {itinerary_placesCreateArgs} args - Arguments to create a Itinerary_places.
     * @example
     * // Create one Itinerary_places
     * const Itinerary_places = await prisma.itinerary_places.create({
     *   data: {
     *     // ... data to create a Itinerary_places
     *   }
     * })
     * 
    **/
    create<T extends itinerary_placesCreateArgs>(
      args: SelectSubset<T, itinerary_placesCreateArgs>
    ): CheckSelect<T, Prisma__itinerary_placesClient<itinerary_places>, Prisma__itinerary_placesClient<itinerary_placesGetPayload<T>>>

    /**
     * Create many Itinerary_places.
     *     @param {itinerary_placesCreateManyArgs} args - Arguments to create many Itinerary_places.
     *     @example
     *     // Create many Itinerary_places
     *     const itinerary_places = await prisma.itinerary_places.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends itinerary_placesCreateManyArgs>(
      args?: SelectSubset<T, itinerary_placesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Itinerary_places.
     * @param {itinerary_placesDeleteArgs} args - Arguments to delete one Itinerary_places.
     * @example
     * // Delete one Itinerary_places
     * const Itinerary_places = await prisma.itinerary_places.delete({
     *   where: {
     *     // ... filter to delete one Itinerary_places
     *   }
     * })
     * 
    **/
    delete<T extends itinerary_placesDeleteArgs>(
      args: SelectSubset<T, itinerary_placesDeleteArgs>
    ): CheckSelect<T, Prisma__itinerary_placesClient<itinerary_places>, Prisma__itinerary_placesClient<itinerary_placesGetPayload<T>>>

    /**
     * Update one Itinerary_places.
     * @param {itinerary_placesUpdateArgs} args - Arguments to update one Itinerary_places.
     * @example
     * // Update one Itinerary_places
     * const itinerary_places = await prisma.itinerary_places.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends itinerary_placesUpdateArgs>(
      args: SelectSubset<T, itinerary_placesUpdateArgs>
    ): CheckSelect<T, Prisma__itinerary_placesClient<itinerary_places>, Prisma__itinerary_placesClient<itinerary_placesGetPayload<T>>>

    /**
     * Delete zero or more Itinerary_places.
     * @param {itinerary_placesDeleteManyArgs} args - Arguments to filter Itinerary_places to delete.
     * @example
     * // Delete a few Itinerary_places
     * const { count } = await prisma.itinerary_places.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends itinerary_placesDeleteManyArgs>(
      args?: SelectSubset<T, itinerary_placesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Itinerary_places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itinerary_placesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Itinerary_places
     * const itinerary_places = await prisma.itinerary_places.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends itinerary_placesUpdateManyArgs>(
      args: SelectSubset<T, itinerary_placesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Itinerary_places.
     * @param {itinerary_placesUpsertArgs} args - Arguments to update or create a Itinerary_places.
     * @example
     * // Update or create a Itinerary_places
     * const itinerary_places = await prisma.itinerary_places.upsert({
     *   create: {
     *     // ... data to create a Itinerary_places
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Itinerary_places we want to update
     *   }
     * })
    **/
    upsert<T extends itinerary_placesUpsertArgs>(
      args: SelectSubset<T, itinerary_placesUpsertArgs>
    ): CheckSelect<T, Prisma__itinerary_placesClient<itinerary_places>, Prisma__itinerary_placesClient<itinerary_placesGetPayload<T>>>

    /**
     * Count the number of Itinerary_places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itinerary_placesCountArgs} args - Arguments to filter Itinerary_places to count.
     * @example
     * // Count the number of Itinerary_places
     * const count = await prisma.itinerary_places.count({
     *   where: {
     *     // ... the filter for the Itinerary_places we want to count
     *   }
     * })
    **/
    count<T extends itinerary_placesCountArgs>(
      args?: Subset<T, itinerary_placesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Itinerary_placesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Itinerary_places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Itinerary_placesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Itinerary_placesAggregateArgs>(args: Subset<T, Itinerary_placesAggregateArgs>): PrismaPromise<GetItinerary_placesAggregateType<T>>

    /**
     * Group by Itinerary_places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Itinerary_placesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Itinerary_placesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Itinerary_placesGroupByArgs['orderBy'] }
        : { orderBy?: Itinerary_placesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Itinerary_placesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItinerary_placesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for itinerary_places.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__itinerary_placesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    itinerary<T extends itineraryArgs = {}>(args?: Subset<T, itineraryArgs>): CheckSelect<T, Prisma__itineraryClient<itinerary | null >, Prisma__itineraryClient<itineraryGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * itinerary_places findUnique
   */
  export type itinerary_placesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the itinerary_places
     * 
    **/
    select?: itinerary_placesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itinerary_placesInclude | null
    /**
     * Throw an Error if a itinerary_places can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which itinerary_places to fetch.
     * 
    **/
    where: itinerary_placesWhereUniqueInput
  }


  /**
   * itinerary_places findFirst
   */
  export type itinerary_placesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the itinerary_places
     * 
    **/
    select?: itinerary_placesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itinerary_placesInclude | null
    /**
     * Throw an Error if a itinerary_places can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which itinerary_places to fetch.
     * 
    **/
    where?: itinerary_placesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of itinerary_places to fetch.
     * 
    **/
    orderBy?: Enumerable<itinerary_placesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for itinerary_places.
     * 
    **/
    cursor?: itinerary_placesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` itinerary_places from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` itinerary_places.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of itinerary_places.
     * 
    **/
    distinct?: Enumerable<Itinerary_placesScalarFieldEnum>
  }


  /**
   * itinerary_places findMany
   */
  export type itinerary_placesFindManyArgs = {
    /**
     * Select specific fields to fetch from the itinerary_places
     * 
    **/
    select?: itinerary_placesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itinerary_placesInclude | null
    /**
     * Filter, which itinerary_places to fetch.
     * 
    **/
    where?: itinerary_placesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of itinerary_places to fetch.
     * 
    **/
    orderBy?: Enumerable<itinerary_placesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing itinerary_places.
     * 
    **/
    cursor?: itinerary_placesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` itinerary_places from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` itinerary_places.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Itinerary_placesScalarFieldEnum>
  }


  /**
   * itinerary_places create
   */
  export type itinerary_placesCreateArgs = {
    /**
     * Select specific fields to fetch from the itinerary_places
     * 
    **/
    select?: itinerary_placesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itinerary_placesInclude | null
    /**
     * The data needed to create a itinerary_places.
     * 
    **/
    data: XOR<itinerary_placesCreateInput, itinerary_placesUncheckedCreateInput>
  }


  /**
   * itinerary_places createMany
   */
  export type itinerary_placesCreateManyArgs = {
    data: Enumerable<itinerary_placesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * itinerary_places update
   */
  export type itinerary_placesUpdateArgs = {
    /**
     * Select specific fields to fetch from the itinerary_places
     * 
    **/
    select?: itinerary_placesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itinerary_placesInclude | null
    /**
     * The data needed to update a itinerary_places.
     * 
    **/
    data: XOR<itinerary_placesUpdateInput, itinerary_placesUncheckedUpdateInput>
    /**
     * Choose, which itinerary_places to update.
     * 
    **/
    where: itinerary_placesWhereUniqueInput
  }


  /**
   * itinerary_places updateMany
   */
  export type itinerary_placesUpdateManyArgs = {
    data: XOR<itinerary_placesUpdateManyMutationInput, itinerary_placesUncheckedUpdateManyInput>
    where?: itinerary_placesWhereInput
  }


  /**
   * itinerary_places upsert
   */
  export type itinerary_placesUpsertArgs = {
    /**
     * Select specific fields to fetch from the itinerary_places
     * 
    **/
    select?: itinerary_placesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itinerary_placesInclude | null
    /**
     * The filter to search for the itinerary_places to update in case it exists.
     * 
    **/
    where: itinerary_placesWhereUniqueInput
    /**
     * In case the itinerary_places found by the `where` argument doesn't exist, create a new itinerary_places with this data.
     * 
    **/
    create: XOR<itinerary_placesCreateInput, itinerary_placesUncheckedCreateInput>
    /**
     * In case the itinerary_places was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<itinerary_placesUpdateInput, itinerary_placesUncheckedUpdateInput>
  }


  /**
   * itinerary_places delete
   */
  export type itinerary_placesDeleteArgs = {
    /**
     * Select specific fields to fetch from the itinerary_places
     * 
    **/
    select?: itinerary_placesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itinerary_placesInclude | null
    /**
     * Filter which itinerary_places to delete.
     * 
    **/
    where: itinerary_placesWhereUniqueInput
  }


  /**
   * itinerary_places deleteMany
   */
  export type itinerary_placesDeleteManyArgs = {
    where?: itinerary_placesWhereInput
  }


  /**
   * itinerary_places without action
   */
  export type itinerary_placesArgs = {
    /**
     * Select specific fields to fetch from the itinerary_places
     * 
    **/
    select?: itinerary_placesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itinerary_placesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Upload_fileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    alternativeText: 'alternativeText',
    caption: 'caption',
    width: 'width',
    height: 'height',
    formats: 'formats',
    hash: 'hash',
    ext: 'ext',
    mime: 'mime',
    size: 'size',
    url: 'url',
    previewUrl: 'previewUrl',
    provider: 'provider',
    provider_metadata: 'provider_metadata',
    created_by: 'created_by',
    updated_by: 'updated_by',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Upload_fileScalarFieldEnum = (typeof Upload_fileScalarFieldEnum)[keyof typeof Upload_fileScalarFieldEnum]


  export const Upload_file_morphScalarFieldEnum: {
    id: 'id',
    upload_file_id: 'upload_file_id',
    related_id: 'related_id',
    related_type: 'related_type',
    field: 'field',
    order: 'order'
  };

  export type Upload_file_morphScalarFieldEnum = (typeof Upload_file_morphScalarFieldEnum)[keyof typeof Upload_file_morphScalarFieldEnum]


  export const VenueTypeScalarFieldEnum: {
    id: 'id',
    created_by: 'created_by',
    updated_by: 'updated_by',
    created_at: 'created_at',
    updated_at: 'updated_at',
    name: 'name'
  };

  export type VenueTypeScalarFieldEnum = (typeof VenueTypeScalarFieldEnum)[keyof typeof VenueTypeScalarFieldEnum]


  export const VenuesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    address: 'address',
    suburb: 'suburb',
    city: 'city',
    postCode: 'postCode',
    lat: 'lat',
    lon: 'lon',
    website: 'website',
    venue_type: 'venue_type',
    breakfast: 'breakfast',
    lunch: 'lunch',
    dinner: 'dinner',
    visible: 'visible',
    created_by: 'created_by',
    updated_by: 'updated_by',
    created_at: 'created_at',
    updated_at: 'updated_at',
    test: 'test',
    cosy: 'cosy',
    romantic: 'romantic',
    weddings: 'weddings',
    post_code: 'post_code',
    bachelor_party: 'bachelor_party',
    hen_party: 'hen_party',
    outdoor_area: 'outdoor_area',
    outdoor_dinning: 'outdoor_dinning',
    outdoor_bar: 'outdoor_bar'
  };

  export type VenuesScalarFieldEnum = (typeof VenuesScalarFieldEnum)[keyof typeof VenuesScalarFieldEnum]


  export const ItineraryScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    itinerary_date: 'itinerary_date',
    created_by: 'created_by',
    updated_by: 'updated_by',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ItineraryScalarFieldEnum = (typeof ItineraryScalarFieldEnum)[keyof typeof ItineraryScalarFieldEnum]


  export const Itinerary_placesScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    itinerary_id: 'itinerary_id',
    venue_data: 'venue_data',
    date: 'date',
    time: 'time',
    created_by: 'created_by',
    updated_by: 'updated_by',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Itinerary_placesScalarFieldEnum = (typeof Itinerary_placesScalarFieldEnum)[keyof typeof Itinerary_placesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type upload_fileWhereInput = {
    AND?: Enumerable<upload_fileWhereInput>
    OR?: Enumerable<upload_fileWhereInput>
    NOT?: Enumerable<upload_fileWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    alternativeText?: StringNullableFilter | string | null
    caption?: StringNullableFilter | string | null
    width?: IntNullableFilter | number | null
    height?: IntNullableFilter | number | null
    formats?: JsonNullableFilter
    hash?: StringFilter | string
    ext?: StringNullableFilter | string | null
    mime?: StringFilter | string
    size?: DecimalFilter | Decimal | number | string
    url?: StringFilter | string
    previewUrl?: StringNullableFilter | string | null
    provider?: StringFilter | string
    provider_metadata?: JsonNullableFilter
    created_by?: IntNullableFilter | number | null
    updated_by?: IntNullableFilter | number | null
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    uploadFileMorph?: Upload_file_morphListRelationFilter
  }

  export type upload_fileOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    alternativeText?: SortOrder
    caption?: SortOrder
    width?: SortOrder
    height?: SortOrder
    formats?: SortOrder
    hash?: SortOrder
    ext?: SortOrder
    mime?: SortOrder
    size?: SortOrder
    url?: SortOrder
    previewUrl?: SortOrder
    provider?: SortOrder
    provider_metadata?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type upload_fileWhereUniqueInput = {
    id?: number
  }

  export type upload_fileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<upload_fileScalarWhereWithAggregatesInput>
    OR?: Enumerable<upload_fileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<upload_fileScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    alternativeText?: StringNullableWithAggregatesFilter | string | null
    caption?: StringNullableWithAggregatesFilter | string | null
    width?: IntNullableWithAggregatesFilter | number | null
    height?: IntNullableWithAggregatesFilter | number | null
    formats?: JsonNullableWithAggregatesFilter
    hash?: StringWithAggregatesFilter | string
    ext?: StringNullableWithAggregatesFilter | string | null
    mime?: StringWithAggregatesFilter | string
    size?: DecimalWithAggregatesFilter | Decimal | number | string
    url?: StringWithAggregatesFilter | string
    previewUrl?: StringNullableWithAggregatesFilter | string | null
    provider?: StringWithAggregatesFilter | string
    provider_metadata?: JsonNullableWithAggregatesFilter
    created_by?: IntNullableWithAggregatesFilter | number | null
    updated_by?: IntNullableWithAggregatesFilter | number | null
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type upload_file_morphWhereInput = {
    AND?: Enumerable<upload_file_morphWhereInput>
    OR?: Enumerable<upload_file_morphWhereInput>
    NOT?: Enumerable<upload_file_morphWhereInput>
    id?: IntFilter | number
    upload_file_id?: IntNullableFilter | number | null
    related_id?: IntNullableFilter | number | null
    related_type?: StringNullableFilter | string | null
    field?: StringNullableFilter | string | null
    order?: IntNullableFilter | number | null
    uploadFile?: XOR<Upload_fileRelationFilter, upload_fileWhereInput> | null
    venues?: XOR<VenuesRelationFilter, venuesWhereInput> | null
  }

  export type upload_file_morphOrderByInput = {
    id?: SortOrder
    upload_file_id?: SortOrder
    related_id?: SortOrder
    related_type?: SortOrder
    field?: SortOrder
    order?: SortOrder
  }

  export type upload_file_morphWhereUniqueInput = {
    id?: number
  }

  export type upload_file_morphScalarWhereWithAggregatesInput = {
    AND?: Enumerable<upload_file_morphScalarWhereWithAggregatesInput>
    OR?: Enumerable<upload_file_morphScalarWhereWithAggregatesInput>
    NOT?: Enumerable<upload_file_morphScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    upload_file_id?: IntNullableWithAggregatesFilter | number | null
    related_id?: IntNullableWithAggregatesFilter | number | null
    related_type?: StringNullableWithAggregatesFilter | string | null
    field?: StringNullableWithAggregatesFilter | string | null
    order?: IntNullableWithAggregatesFilter | number | null
  }

  export type venueTypeWhereInput = {
    AND?: Enumerable<venueTypeWhereInput>
    OR?: Enumerable<venueTypeWhereInput>
    NOT?: Enumerable<venueTypeWhereInput>
    id?: IntFilter | number
    created_by?: IntNullableFilter | number | null
    updated_by?: IntNullableFilter | number | null
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    name?: StringNullableFilter | string | null
    venues?: VenuesListRelationFilter
  }

  export type venueTypeOrderByInput = {
    id?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    name?: SortOrder
  }

  export type venueTypeWhereUniqueInput = {
    id?: number
  }

  export type venueTypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<venueTypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<venueTypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<venueTypeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    created_by?: IntNullableWithAggregatesFilter | number | null
    updated_by?: IntNullableWithAggregatesFilter | number | null
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    name?: StringNullableWithAggregatesFilter | string | null
  }

  export type venuesWhereInput = {
    AND?: Enumerable<venuesWhereInput>
    OR?: Enumerable<venuesWhereInput>
    NOT?: Enumerable<venuesWhereInput>
    id?: IntFilter | number
    title?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    address?: StringNullableFilter | string | null
    suburb?: StringNullableFilter | string | null
    city?: StringNullableFilter | string | null
    postCode?: StringNullableFilter | string | null
    lat?: FloatNullableFilter | number | null
    lon?: FloatNullableFilter | number | null
    website?: StringNullableFilter | string | null
    venue_type?: IntNullableFilter | number | null
    breakfast?: BoolNullableFilter | boolean | null
    lunch?: BoolNullableFilter | boolean | null
    dinner?: BoolNullableFilter | boolean | null
    visible?: BoolNullableFilter | boolean | null
    created_by?: IntNullableFilter | number | null
    updated_by?: IntNullableFilter | number | null
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    test?: StringNullableFilter | string | null
    cosy?: BoolNullableFilter | boolean | null
    romantic?: BoolNullableFilter | boolean | null
    weddings?: BoolNullableFilter | boolean | null
    post_code?: StringNullableFilter | string | null
    bachelor_party?: BoolNullableFilter | boolean | null
    hen_party?: BoolNullableFilter | boolean | null
    outdoor_area?: BoolNullableFilter | boolean | null
    outdoor_dinning?: BoolNullableFilter | boolean | null
    outdoor_bar?: BoolNullableFilter | boolean | null
    venueType?: XOR<VenueTypeRelationFilter, venueTypeWhereInput> | null
    uploadFileMorph?: Upload_file_morphListRelationFilter
  }

  export type venuesOrderByInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    address?: SortOrder
    suburb?: SortOrder
    city?: SortOrder
    postCode?: SortOrder
    lat?: SortOrder
    lon?: SortOrder
    website?: SortOrder
    venue_type?: SortOrder
    breakfast?: SortOrder
    lunch?: SortOrder
    dinner?: SortOrder
    visible?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    test?: SortOrder
    cosy?: SortOrder
    romantic?: SortOrder
    weddings?: SortOrder
    post_code?: SortOrder
    bachelor_party?: SortOrder
    hen_party?: SortOrder
    outdoor_area?: SortOrder
    outdoor_dinning?: SortOrder
    outdoor_bar?: SortOrder
  }

  export type venuesWhereUniqueInput = {
    id?: number
  }

  export type venuesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<venuesScalarWhereWithAggregatesInput>
    OR?: Enumerable<venuesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<venuesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    address?: StringNullableWithAggregatesFilter | string | null
    suburb?: StringNullableWithAggregatesFilter | string | null
    city?: StringNullableWithAggregatesFilter | string | null
    postCode?: StringNullableWithAggregatesFilter | string | null
    lat?: FloatNullableWithAggregatesFilter | number | null
    lon?: FloatNullableWithAggregatesFilter | number | null
    website?: StringNullableWithAggregatesFilter | string | null
    venue_type?: IntNullableWithAggregatesFilter | number | null
    breakfast?: BoolNullableWithAggregatesFilter | boolean | null
    lunch?: BoolNullableWithAggregatesFilter | boolean | null
    dinner?: BoolNullableWithAggregatesFilter | boolean | null
    visible?: BoolNullableWithAggregatesFilter | boolean | null
    created_by?: IntNullableWithAggregatesFilter | number | null
    updated_by?: IntNullableWithAggregatesFilter | number | null
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    test?: StringNullableWithAggregatesFilter | string | null
    cosy?: BoolNullableWithAggregatesFilter | boolean | null
    romantic?: BoolNullableWithAggregatesFilter | boolean | null
    weddings?: BoolNullableWithAggregatesFilter | boolean | null
    post_code?: StringNullableWithAggregatesFilter | string | null
    bachelor_party?: BoolNullableWithAggregatesFilter | boolean | null
    hen_party?: BoolNullableWithAggregatesFilter | boolean | null
    outdoor_area?: BoolNullableWithAggregatesFilter | boolean | null
    outdoor_dinning?: BoolNullableWithAggregatesFilter | boolean | null
    outdoor_bar?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type itineraryWhereInput = {
    AND?: Enumerable<itineraryWhereInput>
    OR?: Enumerable<itineraryWhereInput>
    NOT?: Enumerable<itineraryWhereInput>
    id?: IntFilter | number
    user_id?: StringNullableFilter | string | null
    itinerary_date?: DateTimeNullableFilter | Date | string | null
    created_by?: IntNullableFilter | number | null
    updated_by?: IntNullableFilter | number | null
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    places?: Itinerary_placesListRelationFilter
  }

  export type itineraryOrderByInput = {
    id?: SortOrder
    user_id?: SortOrder
    itinerary_date?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type itineraryWhereUniqueInput = {
    id?: number
  }

  export type itineraryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<itineraryScalarWhereWithAggregatesInput>
    OR?: Enumerable<itineraryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<itineraryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: StringNullableWithAggregatesFilter | string | null
    itinerary_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    created_by?: IntNullableWithAggregatesFilter | number | null
    updated_by?: IntNullableWithAggregatesFilter | number | null
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type itinerary_placesWhereInput = {
    AND?: Enumerable<itinerary_placesWhereInput>
    OR?: Enumerable<itinerary_placesWhereInput>
    NOT?: Enumerable<itinerary_placesWhereInput>
    id?: IntFilter | number
    user_id?: StringNullableFilter | string | null
    itinerary_id?: IntNullableFilter | number | null
    venue_data?: JsonNullableFilter
    date?: DateTimeNullableFilter | Date | string | null
    time?: DateTimeNullableFilter | Date | string | null
    created_by?: IntNullableFilter | number | null
    updated_by?: IntNullableFilter | number | null
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    itinerary?: XOR<ItineraryRelationFilter, itineraryWhereInput> | null
  }

  export type itinerary_placesOrderByInput = {
    id?: SortOrder
    user_id?: SortOrder
    itinerary_id?: SortOrder
    venue_data?: SortOrder
    date?: SortOrder
    time?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type itinerary_placesWhereUniqueInput = {
    id?: number
  }

  export type itinerary_placesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<itinerary_placesScalarWhereWithAggregatesInput>
    OR?: Enumerable<itinerary_placesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<itinerary_placesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: StringNullableWithAggregatesFilter | string | null
    itinerary_id?: IntNullableWithAggregatesFilter | number | null
    venue_data?: JsonNullableWithAggregatesFilter
    date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    time?: DateTimeNullableWithAggregatesFilter | Date | string | null
    created_by?: IntNullableWithAggregatesFilter | number | null
    updated_by?: IntNullableWithAggregatesFilter | number | null
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type upload_fileCreateInput = {
    name: string
    alternativeText?: string | null
    caption?: string | null
    width?: number | null
    height?: number | null
    formats?: InputJsonValue | null
    hash: string
    ext?: string | null
    mime: string
    size: Decimal | number | string
    url: string
    previewUrl?: string | null
    provider: string
    provider_metadata?: InputJsonValue | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    uploadFileMorph?: upload_file_morphCreateNestedManyWithoutUploadFileInput
  }

  export type upload_fileUncheckedCreateInput = {
    id?: number
    name: string
    alternativeText?: string | null
    caption?: string | null
    width?: number | null
    height?: number | null
    formats?: InputJsonValue | null
    hash: string
    ext?: string | null
    mime: string
    size: Decimal | number | string
    url: string
    previewUrl?: string | null
    provider: string
    provider_metadata?: InputJsonValue | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    uploadFileMorph?: upload_file_morphUncheckedCreateNestedManyWithoutUploadFileInput
  }

  export type upload_fileUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    alternativeText?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    formats?: InputJsonValue | null
    hash?: StringFieldUpdateOperationsInput | string
    ext?: NullableStringFieldUpdateOperationsInput | string | null
    mime?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    url?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: StringFieldUpdateOperationsInput | string
    provider_metadata?: InputJsonValue | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uploadFileMorph?: upload_file_morphUpdateManyWithoutUploadFileInput
  }

  export type upload_fileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    alternativeText?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    formats?: InputJsonValue | null
    hash?: StringFieldUpdateOperationsInput | string
    ext?: NullableStringFieldUpdateOperationsInput | string | null
    mime?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    url?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: StringFieldUpdateOperationsInput | string
    provider_metadata?: InputJsonValue | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uploadFileMorph?: upload_file_morphUncheckedUpdateManyWithoutUploadFileInput
  }

  export type upload_fileCreateManyInput = {
    id?: number
    name: string
    alternativeText?: string | null
    caption?: string | null
    width?: number | null
    height?: number | null
    formats?: InputJsonValue | null
    hash: string
    ext?: string | null
    mime: string
    size: Decimal | number | string
    url: string
    previewUrl?: string | null
    provider: string
    provider_metadata?: InputJsonValue | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type upload_fileUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    alternativeText?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    formats?: InputJsonValue | null
    hash?: StringFieldUpdateOperationsInput | string
    ext?: NullableStringFieldUpdateOperationsInput | string | null
    mime?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    url?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: StringFieldUpdateOperationsInput | string
    provider_metadata?: InputJsonValue | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type upload_fileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    alternativeText?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    formats?: InputJsonValue | null
    hash?: StringFieldUpdateOperationsInput | string
    ext?: NullableStringFieldUpdateOperationsInput | string | null
    mime?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    url?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: StringFieldUpdateOperationsInput | string
    provider_metadata?: InputJsonValue | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type upload_file_morphCreateInput = {
    related_type?: string | null
    field?: string | null
    order?: number | null
    uploadFile?: upload_fileCreateNestedOneWithoutUploadFileMorphInput
    venues?: venuesCreateNestedOneWithoutUploadFileMorphInput
  }

  export type upload_file_morphUncheckedCreateInput = {
    id?: number
    upload_file_id?: number | null
    related_id?: number | null
    related_type?: string | null
    field?: string | null
    order?: number | null
  }

  export type upload_file_morphUpdateInput = {
    related_type?: NullableStringFieldUpdateOperationsInput | string | null
    field?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    uploadFile?: upload_fileUpdateOneWithoutUploadFileMorphInput
    venues?: venuesUpdateOneWithoutUploadFileMorphInput
  }

  export type upload_file_morphUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    upload_file_id?: NullableIntFieldUpdateOperationsInput | number | null
    related_id?: NullableIntFieldUpdateOperationsInput | number | null
    related_type?: NullableStringFieldUpdateOperationsInput | string | null
    field?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type upload_file_morphCreateManyInput = {
    id?: number
    upload_file_id?: number | null
    related_id?: number | null
    related_type?: string | null
    field?: string | null
    order?: number | null
  }

  export type upload_file_morphUpdateManyMutationInput = {
    related_type?: NullableStringFieldUpdateOperationsInput | string | null
    field?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type upload_file_morphUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    upload_file_id?: NullableIntFieldUpdateOperationsInput | number | null
    related_id?: NullableIntFieldUpdateOperationsInput | number | null
    related_type?: NullableStringFieldUpdateOperationsInput | string | null
    field?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type venueTypeCreateInput = {
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    name?: string | null
    venues?: venuesCreateNestedManyWithoutVenueTypeInput
  }

  export type venueTypeUncheckedCreateInput = {
    id?: number
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    name?: string | null
    venues?: venuesUncheckedCreateNestedManyWithoutVenueTypeInput
  }

  export type venueTypeUpdateInput = {
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    venues?: venuesUpdateManyWithoutVenueTypeInput
  }

  export type venueTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    venues?: venuesUncheckedUpdateManyWithoutVenueTypeInput
  }

  export type venueTypeCreateManyInput = {
    id?: number
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    name?: string | null
  }

  export type venueTypeUpdateManyMutationInput = {
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type venueTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type venuesCreateInput = {
    title?: string | null
    description?: string | null
    address?: string | null
    suburb?: string | null
    city?: string | null
    postCode?: string | null
    lat?: number | null
    lon?: number | null
    website?: string | null
    breakfast?: boolean | null
    lunch?: boolean | null
    dinner?: boolean | null
    visible?: boolean | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    test?: string | null
    cosy?: boolean | null
    romantic?: boolean | null
    weddings?: boolean | null
    post_code?: string | null
    bachelor_party?: boolean | null
    hen_party?: boolean | null
    outdoor_area?: boolean | null
    outdoor_dinning?: boolean | null
    outdoor_bar?: boolean | null
    venueType?: venueTypeCreateNestedOneWithoutVenuesInput
    uploadFileMorph?: upload_file_morphCreateNestedManyWithoutVenuesInput
  }

  export type venuesUncheckedCreateInput = {
    id?: number
    title?: string | null
    description?: string | null
    address?: string | null
    suburb?: string | null
    city?: string | null
    postCode?: string | null
    lat?: number | null
    lon?: number | null
    website?: string | null
    venue_type?: number | null
    breakfast?: boolean | null
    lunch?: boolean | null
    dinner?: boolean | null
    visible?: boolean | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    test?: string | null
    cosy?: boolean | null
    romantic?: boolean | null
    weddings?: boolean | null
    post_code?: string | null
    bachelor_party?: boolean | null
    hen_party?: boolean | null
    outdoor_area?: boolean | null
    outdoor_dinning?: boolean | null
    outdoor_bar?: boolean | null
    uploadFileMorph?: upload_file_morphUncheckedCreateNestedManyWithoutVenuesInput
  }

  export type venuesUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postCode?: NullableStringFieldUpdateOperationsInput | string | null
    lat?: NullableFloatFieldUpdateOperationsInput | number | null
    lon?: NullableFloatFieldUpdateOperationsInput | number | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    breakfast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lunch?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dinner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    visible?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    test?: NullableStringFieldUpdateOperationsInput | string | null
    cosy?: NullableBoolFieldUpdateOperationsInput | boolean | null
    romantic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    weddings?: NullableBoolFieldUpdateOperationsInput | boolean | null
    post_code?: NullableStringFieldUpdateOperationsInput | string | null
    bachelor_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hen_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_area?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_dinning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_bar?: NullableBoolFieldUpdateOperationsInput | boolean | null
    venueType?: venueTypeUpdateOneWithoutVenuesInput
    uploadFileMorph?: upload_file_morphUpdateManyWithoutVenuesInput
  }

  export type venuesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postCode?: NullableStringFieldUpdateOperationsInput | string | null
    lat?: NullableFloatFieldUpdateOperationsInput | number | null
    lon?: NullableFloatFieldUpdateOperationsInput | number | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    venue_type?: NullableIntFieldUpdateOperationsInput | number | null
    breakfast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lunch?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dinner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    visible?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    test?: NullableStringFieldUpdateOperationsInput | string | null
    cosy?: NullableBoolFieldUpdateOperationsInput | boolean | null
    romantic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    weddings?: NullableBoolFieldUpdateOperationsInput | boolean | null
    post_code?: NullableStringFieldUpdateOperationsInput | string | null
    bachelor_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hen_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_area?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_dinning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_bar?: NullableBoolFieldUpdateOperationsInput | boolean | null
    uploadFileMorph?: upload_file_morphUncheckedUpdateManyWithoutVenuesInput
  }

  export type venuesCreateManyInput = {
    id?: number
    title?: string | null
    description?: string | null
    address?: string | null
    suburb?: string | null
    city?: string | null
    postCode?: string | null
    lat?: number | null
    lon?: number | null
    website?: string | null
    venue_type?: number | null
    breakfast?: boolean | null
    lunch?: boolean | null
    dinner?: boolean | null
    visible?: boolean | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    test?: string | null
    cosy?: boolean | null
    romantic?: boolean | null
    weddings?: boolean | null
    post_code?: string | null
    bachelor_party?: boolean | null
    hen_party?: boolean | null
    outdoor_area?: boolean | null
    outdoor_dinning?: boolean | null
    outdoor_bar?: boolean | null
  }

  export type venuesUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postCode?: NullableStringFieldUpdateOperationsInput | string | null
    lat?: NullableFloatFieldUpdateOperationsInput | number | null
    lon?: NullableFloatFieldUpdateOperationsInput | number | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    breakfast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lunch?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dinner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    visible?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    test?: NullableStringFieldUpdateOperationsInput | string | null
    cosy?: NullableBoolFieldUpdateOperationsInput | boolean | null
    romantic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    weddings?: NullableBoolFieldUpdateOperationsInput | boolean | null
    post_code?: NullableStringFieldUpdateOperationsInput | string | null
    bachelor_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hen_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_area?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_dinning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_bar?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type venuesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postCode?: NullableStringFieldUpdateOperationsInput | string | null
    lat?: NullableFloatFieldUpdateOperationsInput | number | null
    lon?: NullableFloatFieldUpdateOperationsInput | number | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    venue_type?: NullableIntFieldUpdateOperationsInput | number | null
    breakfast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lunch?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dinner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    visible?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    test?: NullableStringFieldUpdateOperationsInput | string | null
    cosy?: NullableBoolFieldUpdateOperationsInput | boolean | null
    romantic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    weddings?: NullableBoolFieldUpdateOperationsInput | boolean | null
    post_code?: NullableStringFieldUpdateOperationsInput | string | null
    bachelor_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hen_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_area?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_dinning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_bar?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type itineraryCreateInput = {
    user_id?: string | null
    itinerary_date?: Date | string | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    places?: itinerary_placesCreateNestedManyWithoutItineraryInput
  }

  export type itineraryUncheckedCreateInput = {
    id?: number
    user_id?: string | null
    itinerary_date?: Date | string | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    places?: itinerary_placesUncheckedCreateNestedManyWithoutItineraryInput
  }

  export type itineraryUpdateInput = {
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    itinerary_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    places?: itinerary_placesUpdateManyWithoutItineraryInput
  }

  export type itineraryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    itinerary_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    places?: itinerary_placesUncheckedUpdateManyWithoutItineraryInput
  }

  export type itineraryCreateManyInput = {
    id?: number
    user_id?: string | null
    itinerary_date?: Date | string | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type itineraryUpdateManyMutationInput = {
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    itinerary_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type itineraryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    itinerary_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type itinerary_placesCreateInput = {
    user_id?: string | null
    venue_data?: InputJsonValue | null
    date?: Date | string | null
    time?: Date | string | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    itinerary?: itineraryCreateNestedOneWithoutPlacesInput
  }

  export type itinerary_placesUncheckedCreateInput = {
    id?: number
    user_id?: string | null
    itinerary_id?: number | null
    venue_data?: InputJsonValue | null
    date?: Date | string | null
    time?: Date | string | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type itinerary_placesUpdateInput = {
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    venue_data?: InputJsonValue | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itinerary?: itineraryUpdateOneWithoutPlacesInput
  }

  export type itinerary_placesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    itinerary_id?: NullableIntFieldUpdateOperationsInput | number | null
    venue_data?: InputJsonValue | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type itinerary_placesCreateManyInput = {
    id?: number
    user_id?: string | null
    itinerary_id?: number | null
    venue_data?: InputJsonValue | null
    date?: Date | string | null
    time?: Date | string | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type itinerary_placesUpdateManyMutationInput = {
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    venue_data?: InputJsonValue | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type itinerary_placesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    itinerary_id?: NullableIntFieldUpdateOperationsInput | number | null
    venue_data?: InputJsonValue | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | null
    not?: InputJsonValue | null
  }

  export type DecimalFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalFilter | Decimal | number | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type Upload_file_morphListRelationFilter = {
    every?: upload_file_morphWhereInput
    some?: upload_file_morphWhereInput
    none?: upload_file_morphWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | null
    not?: InputJsonValue | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedJsonNullableFilter
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | number | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDecimalFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type Upload_fileRelationFilter = {
    is?: upload_fileWhereInput | null
    isNot?: upload_fileWhereInput | null
  }

  export type VenuesRelationFilter = {
    is?: venuesWhereInput | null
    isNot?: venuesWhereInput | null
  }

  export type VenuesListRelationFilter = {
    every?: venuesWhereInput
    some?: venuesWhereInput
    none?: venuesWhereInput
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type VenueTypeRelationFilter = {
    is?: venueTypeWhereInput | null
    isNot?: venueTypeWhereInput | null
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedFloatNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolNullableFilter
  }

  export type Itinerary_placesListRelationFilter = {
    every?: itinerary_placesWhereInput
    some?: itinerary_placesWhereInput
    none?: itinerary_placesWhereInput
  }

  export type ItineraryRelationFilter = {
    is?: itineraryWhereInput | null
    isNot?: itineraryWhereInput | null
  }

  export type upload_file_morphCreateNestedManyWithoutUploadFileInput = {
    create?: XOR<Enumerable<upload_file_morphCreateWithoutUploadFileInput>, Enumerable<upload_file_morphUncheckedCreateWithoutUploadFileInput>>
    connectOrCreate?: Enumerable<upload_file_morphCreateOrConnectWithoutUploadFileInput>
    createMany?: upload_file_morphCreateManyUploadFileInputEnvelope
    connect?: Enumerable<upload_file_morphWhereUniqueInput>
  }

  export type upload_file_morphUncheckedCreateNestedManyWithoutUploadFileInput = {
    create?: XOR<Enumerable<upload_file_morphCreateWithoutUploadFileInput>, Enumerable<upload_file_morphUncheckedCreateWithoutUploadFileInput>>
    connectOrCreate?: Enumerable<upload_file_morphCreateOrConnectWithoutUploadFileInput>
    createMany?: upload_file_morphCreateManyUploadFileInputEnvelope
    connect?: Enumerable<upload_file_morphWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | number | string
    increment?: Decimal | number | string
    decrement?: Decimal | number | string
    multiply?: Decimal | number | string
    divide?: Decimal | number | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type upload_file_morphUpdateManyWithoutUploadFileInput = {
    create?: XOR<Enumerable<upload_file_morphCreateWithoutUploadFileInput>, Enumerable<upload_file_morphUncheckedCreateWithoutUploadFileInput>>
    connectOrCreate?: Enumerable<upload_file_morphCreateOrConnectWithoutUploadFileInput>
    upsert?: Enumerable<upload_file_morphUpsertWithWhereUniqueWithoutUploadFileInput>
    createMany?: upload_file_morphCreateManyUploadFileInputEnvelope
    connect?: Enumerable<upload_file_morphWhereUniqueInput>
    set?: Enumerable<upload_file_morphWhereUniqueInput>
    disconnect?: Enumerable<upload_file_morphWhereUniqueInput>
    delete?: Enumerable<upload_file_morphWhereUniqueInput>
    update?: Enumerable<upload_file_morphUpdateWithWhereUniqueWithoutUploadFileInput>
    updateMany?: Enumerable<upload_file_morphUpdateManyWithWhereWithoutUploadFileInput>
    deleteMany?: Enumerable<upload_file_morphScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type upload_file_morphUncheckedUpdateManyWithoutUploadFileInput = {
    create?: XOR<Enumerable<upload_file_morphCreateWithoutUploadFileInput>, Enumerable<upload_file_morphUncheckedCreateWithoutUploadFileInput>>
    connectOrCreate?: Enumerable<upload_file_morphCreateOrConnectWithoutUploadFileInput>
    upsert?: Enumerable<upload_file_morphUpsertWithWhereUniqueWithoutUploadFileInput>
    createMany?: upload_file_morphCreateManyUploadFileInputEnvelope
    connect?: Enumerable<upload_file_morphWhereUniqueInput>
    set?: Enumerable<upload_file_morphWhereUniqueInput>
    disconnect?: Enumerable<upload_file_morphWhereUniqueInput>
    delete?: Enumerable<upload_file_morphWhereUniqueInput>
    update?: Enumerable<upload_file_morphUpdateWithWhereUniqueWithoutUploadFileInput>
    updateMany?: Enumerable<upload_file_morphUpdateManyWithWhereWithoutUploadFileInput>
    deleteMany?: Enumerable<upload_file_morphScalarWhereInput>
  }

  export type upload_fileCreateNestedOneWithoutUploadFileMorphInput = {
    create?: XOR<upload_fileCreateWithoutUploadFileMorphInput, upload_fileUncheckedCreateWithoutUploadFileMorphInput>
    connectOrCreate?: upload_fileCreateOrConnectWithoutUploadFileMorphInput
    connect?: upload_fileWhereUniqueInput
  }

  export type venuesCreateNestedOneWithoutUploadFileMorphInput = {
    create?: XOR<venuesCreateWithoutUploadFileMorphInput, venuesUncheckedCreateWithoutUploadFileMorphInput>
    connectOrCreate?: venuesCreateOrConnectWithoutUploadFileMorphInput
    connect?: venuesWhereUniqueInput
  }

  export type upload_fileUpdateOneWithoutUploadFileMorphInput = {
    create?: XOR<upload_fileCreateWithoutUploadFileMorphInput, upload_fileUncheckedCreateWithoutUploadFileMorphInput>
    connectOrCreate?: upload_fileCreateOrConnectWithoutUploadFileMorphInput
    upsert?: upload_fileUpsertWithoutUploadFileMorphInput
    connect?: upload_fileWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<upload_fileUpdateWithoutUploadFileMorphInput, upload_fileUncheckedUpdateWithoutUploadFileMorphInput>
  }

  export type venuesUpdateOneWithoutUploadFileMorphInput = {
    create?: XOR<venuesCreateWithoutUploadFileMorphInput, venuesUncheckedCreateWithoutUploadFileMorphInput>
    connectOrCreate?: venuesCreateOrConnectWithoutUploadFileMorphInput
    upsert?: venuesUpsertWithoutUploadFileMorphInput
    connect?: venuesWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<venuesUpdateWithoutUploadFileMorphInput, venuesUncheckedUpdateWithoutUploadFileMorphInput>
  }

  export type venuesCreateNestedManyWithoutVenueTypeInput = {
    create?: XOR<Enumerable<venuesCreateWithoutVenueTypeInput>, Enumerable<venuesUncheckedCreateWithoutVenueTypeInput>>
    connectOrCreate?: Enumerable<venuesCreateOrConnectWithoutVenueTypeInput>
    createMany?: venuesCreateManyVenueTypeInputEnvelope
    connect?: Enumerable<venuesWhereUniqueInput>
  }

  export type venuesUncheckedCreateNestedManyWithoutVenueTypeInput = {
    create?: XOR<Enumerable<venuesCreateWithoutVenueTypeInput>, Enumerable<venuesUncheckedCreateWithoutVenueTypeInput>>
    connectOrCreate?: Enumerable<venuesCreateOrConnectWithoutVenueTypeInput>
    createMany?: venuesCreateManyVenueTypeInputEnvelope
    connect?: Enumerable<venuesWhereUniqueInput>
  }

  export type venuesUpdateManyWithoutVenueTypeInput = {
    create?: XOR<Enumerable<venuesCreateWithoutVenueTypeInput>, Enumerable<venuesUncheckedCreateWithoutVenueTypeInput>>
    connectOrCreate?: Enumerable<venuesCreateOrConnectWithoutVenueTypeInput>
    upsert?: Enumerable<venuesUpsertWithWhereUniqueWithoutVenueTypeInput>
    createMany?: venuesCreateManyVenueTypeInputEnvelope
    connect?: Enumerable<venuesWhereUniqueInput>
    set?: Enumerable<venuesWhereUniqueInput>
    disconnect?: Enumerable<venuesWhereUniqueInput>
    delete?: Enumerable<venuesWhereUniqueInput>
    update?: Enumerable<venuesUpdateWithWhereUniqueWithoutVenueTypeInput>
    updateMany?: Enumerable<venuesUpdateManyWithWhereWithoutVenueTypeInput>
    deleteMany?: Enumerable<venuesScalarWhereInput>
  }

  export type venuesUncheckedUpdateManyWithoutVenueTypeInput = {
    create?: XOR<Enumerable<venuesCreateWithoutVenueTypeInput>, Enumerable<venuesUncheckedCreateWithoutVenueTypeInput>>
    connectOrCreate?: Enumerable<venuesCreateOrConnectWithoutVenueTypeInput>
    upsert?: Enumerable<venuesUpsertWithWhereUniqueWithoutVenueTypeInput>
    createMany?: venuesCreateManyVenueTypeInputEnvelope
    connect?: Enumerable<venuesWhereUniqueInput>
    set?: Enumerable<venuesWhereUniqueInput>
    disconnect?: Enumerable<venuesWhereUniqueInput>
    delete?: Enumerable<venuesWhereUniqueInput>
    update?: Enumerable<venuesUpdateWithWhereUniqueWithoutVenueTypeInput>
    updateMany?: Enumerable<venuesUpdateManyWithWhereWithoutVenueTypeInput>
    deleteMany?: Enumerable<venuesScalarWhereInput>
  }

  export type venueTypeCreateNestedOneWithoutVenuesInput = {
    create?: XOR<venueTypeCreateWithoutVenuesInput, venueTypeUncheckedCreateWithoutVenuesInput>
    connectOrCreate?: venueTypeCreateOrConnectWithoutVenuesInput
    connect?: venueTypeWhereUniqueInput
  }

  export type upload_file_morphCreateNestedManyWithoutVenuesInput = {
    create?: XOR<Enumerable<upload_file_morphCreateWithoutVenuesInput>, Enumerable<upload_file_morphUncheckedCreateWithoutVenuesInput>>
    connectOrCreate?: Enumerable<upload_file_morphCreateOrConnectWithoutVenuesInput>
    createMany?: upload_file_morphCreateManyVenuesInputEnvelope
    connect?: Enumerable<upload_file_morphWhereUniqueInput>
  }

  export type upload_file_morphUncheckedCreateNestedManyWithoutVenuesInput = {
    create?: XOR<Enumerable<upload_file_morphCreateWithoutVenuesInput>, Enumerable<upload_file_morphUncheckedCreateWithoutVenuesInput>>
    connectOrCreate?: Enumerable<upload_file_morphCreateOrConnectWithoutVenuesInput>
    createMany?: upload_file_morphCreateManyVenuesInputEnvelope
    connect?: Enumerable<upload_file_morphWhereUniqueInput>
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type venueTypeUpdateOneWithoutVenuesInput = {
    create?: XOR<venueTypeCreateWithoutVenuesInput, venueTypeUncheckedCreateWithoutVenuesInput>
    connectOrCreate?: venueTypeCreateOrConnectWithoutVenuesInput
    upsert?: venueTypeUpsertWithoutVenuesInput
    connect?: venueTypeWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<venueTypeUpdateWithoutVenuesInput, venueTypeUncheckedUpdateWithoutVenuesInput>
  }

  export type upload_file_morphUpdateManyWithoutVenuesInput = {
    create?: XOR<Enumerable<upload_file_morphCreateWithoutVenuesInput>, Enumerable<upload_file_morphUncheckedCreateWithoutVenuesInput>>
    connectOrCreate?: Enumerable<upload_file_morphCreateOrConnectWithoutVenuesInput>
    upsert?: Enumerable<upload_file_morphUpsertWithWhereUniqueWithoutVenuesInput>
    createMany?: upload_file_morphCreateManyVenuesInputEnvelope
    connect?: Enumerable<upload_file_morphWhereUniqueInput>
    set?: Enumerable<upload_file_morphWhereUniqueInput>
    disconnect?: Enumerable<upload_file_morphWhereUniqueInput>
    delete?: Enumerable<upload_file_morphWhereUniqueInput>
    update?: Enumerable<upload_file_morphUpdateWithWhereUniqueWithoutVenuesInput>
    updateMany?: Enumerable<upload_file_morphUpdateManyWithWhereWithoutVenuesInput>
    deleteMany?: Enumerable<upload_file_morphScalarWhereInput>
  }

  export type upload_file_morphUncheckedUpdateManyWithoutVenuesInput = {
    create?: XOR<Enumerable<upload_file_morphCreateWithoutVenuesInput>, Enumerable<upload_file_morphUncheckedCreateWithoutVenuesInput>>
    connectOrCreate?: Enumerable<upload_file_morphCreateOrConnectWithoutVenuesInput>
    upsert?: Enumerable<upload_file_morphUpsertWithWhereUniqueWithoutVenuesInput>
    createMany?: upload_file_morphCreateManyVenuesInputEnvelope
    connect?: Enumerable<upload_file_morphWhereUniqueInput>
    set?: Enumerable<upload_file_morphWhereUniqueInput>
    disconnect?: Enumerable<upload_file_morphWhereUniqueInput>
    delete?: Enumerable<upload_file_morphWhereUniqueInput>
    update?: Enumerable<upload_file_morphUpdateWithWhereUniqueWithoutVenuesInput>
    updateMany?: Enumerable<upload_file_morphUpdateManyWithWhereWithoutVenuesInput>
    deleteMany?: Enumerable<upload_file_morphScalarWhereInput>
  }

  export type itinerary_placesCreateNestedManyWithoutItineraryInput = {
    create?: XOR<Enumerable<itinerary_placesCreateWithoutItineraryInput>, Enumerable<itinerary_placesUncheckedCreateWithoutItineraryInput>>
    connectOrCreate?: Enumerable<itinerary_placesCreateOrConnectWithoutItineraryInput>
    createMany?: itinerary_placesCreateManyItineraryInputEnvelope
    connect?: Enumerable<itinerary_placesWhereUniqueInput>
  }

  export type itinerary_placesUncheckedCreateNestedManyWithoutItineraryInput = {
    create?: XOR<Enumerable<itinerary_placesCreateWithoutItineraryInput>, Enumerable<itinerary_placesUncheckedCreateWithoutItineraryInput>>
    connectOrCreate?: Enumerable<itinerary_placesCreateOrConnectWithoutItineraryInput>
    createMany?: itinerary_placesCreateManyItineraryInputEnvelope
    connect?: Enumerable<itinerary_placesWhereUniqueInput>
  }

  export type itinerary_placesUpdateManyWithoutItineraryInput = {
    create?: XOR<Enumerable<itinerary_placesCreateWithoutItineraryInput>, Enumerable<itinerary_placesUncheckedCreateWithoutItineraryInput>>
    connectOrCreate?: Enumerable<itinerary_placesCreateOrConnectWithoutItineraryInput>
    upsert?: Enumerable<itinerary_placesUpsertWithWhereUniqueWithoutItineraryInput>
    createMany?: itinerary_placesCreateManyItineraryInputEnvelope
    connect?: Enumerable<itinerary_placesWhereUniqueInput>
    set?: Enumerable<itinerary_placesWhereUniqueInput>
    disconnect?: Enumerable<itinerary_placesWhereUniqueInput>
    delete?: Enumerable<itinerary_placesWhereUniqueInput>
    update?: Enumerable<itinerary_placesUpdateWithWhereUniqueWithoutItineraryInput>
    updateMany?: Enumerable<itinerary_placesUpdateManyWithWhereWithoutItineraryInput>
    deleteMany?: Enumerable<itinerary_placesScalarWhereInput>
  }

  export type itinerary_placesUncheckedUpdateManyWithoutItineraryInput = {
    create?: XOR<Enumerable<itinerary_placesCreateWithoutItineraryInput>, Enumerable<itinerary_placesUncheckedCreateWithoutItineraryInput>>
    connectOrCreate?: Enumerable<itinerary_placesCreateOrConnectWithoutItineraryInput>
    upsert?: Enumerable<itinerary_placesUpsertWithWhereUniqueWithoutItineraryInput>
    createMany?: itinerary_placesCreateManyItineraryInputEnvelope
    connect?: Enumerable<itinerary_placesWhereUniqueInput>
    set?: Enumerable<itinerary_placesWhereUniqueInput>
    disconnect?: Enumerable<itinerary_placesWhereUniqueInput>
    delete?: Enumerable<itinerary_placesWhereUniqueInput>
    update?: Enumerable<itinerary_placesUpdateWithWhereUniqueWithoutItineraryInput>
    updateMany?: Enumerable<itinerary_placesUpdateManyWithWhereWithoutItineraryInput>
    deleteMany?: Enumerable<itinerary_placesScalarWhereInput>
  }

  export type itineraryCreateNestedOneWithoutPlacesInput = {
    create?: XOR<itineraryCreateWithoutPlacesInput, itineraryUncheckedCreateWithoutPlacesInput>
    connectOrCreate?: itineraryCreateOrConnectWithoutPlacesInput
    connect?: itineraryWhereUniqueInput
  }

  export type itineraryUpdateOneWithoutPlacesInput = {
    create?: XOR<itineraryCreateWithoutPlacesInput, itineraryUncheckedCreateWithoutPlacesInput>
    connectOrCreate?: itineraryCreateOrConnectWithoutPlacesInput
    upsert?: itineraryUpsertWithoutPlacesInput
    connect?: itineraryWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<itineraryUpdateWithoutPlacesInput, itineraryUncheckedUpdateWithoutPlacesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalFilter | Decimal | number | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | null
    not?: InputJsonValue | null
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | number | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDecimalFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedFloatNullableFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolNullableFilter
  }

  export type upload_file_morphCreateWithoutUploadFileInput = {
    related_type?: string | null
    field?: string | null
    order?: number | null
    venues?: venuesCreateNestedOneWithoutUploadFileMorphInput
  }

  export type upload_file_morphUncheckedCreateWithoutUploadFileInput = {
    id?: number
    related_id?: number | null
    related_type?: string | null
    field?: string | null
    order?: number | null
  }

  export type upload_file_morphCreateOrConnectWithoutUploadFileInput = {
    where: upload_file_morphWhereUniqueInput
    create: XOR<upload_file_morphCreateWithoutUploadFileInput, upload_file_morphUncheckedCreateWithoutUploadFileInput>
  }

  export type upload_file_morphCreateManyUploadFileInputEnvelope = {
    data: Enumerable<upload_file_morphCreateManyUploadFileInput>
    skipDuplicates?: boolean
  }

  export type upload_file_morphUpsertWithWhereUniqueWithoutUploadFileInput = {
    where: upload_file_morphWhereUniqueInput
    update: XOR<upload_file_morphUpdateWithoutUploadFileInput, upload_file_morphUncheckedUpdateWithoutUploadFileInput>
    create: XOR<upload_file_morphCreateWithoutUploadFileInput, upload_file_morphUncheckedCreateWithoutUploadFileInput>
  }

  export type upload_file_morphUpdateWithWhereUniqueWithoutUploadFileInput = {
    where: upload_file_morphWhereUniqueInput
    data: XOR<upload_file_morphUpdateWithoutUploadFileInput, upload_file_morphUncheckedUpdateWithoutUploadFileInput>
  }

  export type upload_file_morphUpdateManyWithWhereWithoutUploadFileInput = {
    where: upload_file_morphScalarWhereInput
    data: XOR<upload_file_morphUpdateManyMutationInput, upload_file_morphUncheckedUpdateManyWithoutUploadFileMorphInput>
  }

  export type upload_file_morphScalarWhereInput = {
    AND?: Enumerable<upload_file_morphScalarWhereInput>
    OR?: Enumerable<upload_file_morphScalarWhereInput>
    NOT?: Enumerable<upload_file_morphScalarWhereInput>
    id?: IntFilter | number
    upload_file_id?: IntNullableFilter | number | null
    related_id?: IntNullableFilter | number | null
    related_type?: StringNullableFilter | string | null
    field?: StringNullableFilter | string | null
    order?: IntNullableFilter | number | null
  }

  export type upload_fileCreateWithoutUploadFileMorphInput = {
    name: string
    alternativeText?: string | null
    caption?: string | null
    width?: number | null
    height?: number | null
    formats?: InputJsonValue | null
    hash: string
    ext?: string | null
    mime: string
    size: Decimal | number | string
    url: string
    previewUrl?: string | null
    provider: string
    provider_metadata?: InputJsonValue | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type upload_fileUncheckedCreateWithoutUploadFileMorphInput = {
    id?: number
    name: string
    alternativeText?: string | null
    caption?: string | null
    width?: number | null
    height?: number | null
    formats?: InputJsonValue | null
    hash: string
    ext?: string | null
    mime: string
    size: Decimal | number | string
    url: string
    previewUrl?: string | null
    provider: string
    provider_metadata?: InputJsonValue | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type upload_fileCreateOrConnectWithoutUploadFileMorphInput = {
    where: upload_fileWhereUniqueInput
    create: XOR<upload_fileCreateWithoutUploadFileMorphInput, upload_fileUncheckedCreateWithoutUploadFileMorphInput>
  }

  export type venuesCreateWithoutUploadFileMorphInput = {
    title?: string | null
    description?: string | null
    address?: string | null
    suburb?: string | null
    city?: string | null
    postCode?: string | null
    lat?: number | null
    lon?: number | null
    website?: string | null
    breakfast?: boolean | null
    lunch?: boolean | null
    dinner?: boolean | null
    visible?: boolean | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    test?: string | null
    cosy?: boolean | null
    romantic?: boolean | null
    weddings?: boolean | null
    post_code?: string | null
    bachelor_party?: boolean | null
    hen_party?: boolean | null
    outdoor_area?: boolean | null
    outdoor_dinning?: boolean | null
    outdoor_bar?: boolean | null
    venueType?: venueTypeCreateNestedOneWithoutVenuesInput
  }

  export type venuesUncheckedCreateWithoutUploadFileMorphInput = {
    id?: number
    title?: string | null
    description?: string | null
    address?: string | null
    suburb?: string | null
    city?: string | null
    postCode?: string | null
    lat?: number | null
    lon?: number | null
    website?: string | null
    venue_type?: number | null
    breakfast?: boolean | null
    lunch?: boolean | null
    dinner?: boolean | null
    visible?: boolean | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    test?: string | null
    cosy?: boolean | null
    romantic?: boolean | null
    weddings?: boolean | null
    post_code?: string | null
    bachelor_party?: boolean | null
    hen_party?: boolean | null
    outdoor_area?: boolean | null
    outdoor_dinning?: boolean | null
    outdoor_bar?: boolean | null
  }

  export type venuesCreateOrConnectWithoutUploadFileMorphInput = {
    where: venuesWhereUniqueInput
    create: XOR<venuesCreateWithoutUploadFileMorphInput, venuesUncheckedCreateWithoutUploadFileMorphInput>
  }

  export type upload_fileUpsertWithoutUploadFileMorphInput = {
    update: XOR<upload_fileUpdateWithoutUploadFileMorphInput, upload_fileUncheckedUpdateWithoutUploadFileMorphInput>
    create: XOR<upload_fileCreateWithoutUploadFileMorphInput, upload_fileUncheckedCreateWithoutUploadFileMorphInput>
  }

  export type upload_fileUpdateWithoutUploadFileMorphInput = {
    name?: StringFieldUpdateOperationsInput | string
    alternativeText?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    formats?: InputJsonValue | null
    hash?: StringFieldUpdateOperationsInput | string
    ext?: NullableStringFieldUpdateOperationsInput | string | null
    mime?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    url?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: StringFieldUpdateOperationsInput | string
    provider_metadata?: InputJsonValue | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type upload_fileUncheckedUpdateWithoutUploadFileMorphInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    alternativeText?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    formats?: InputJsonValue | null
    hash?: StringFieldUpdateOperationsInput | string
    ext?: NullableStringFieldUpdateOperationsInput | string | null
    mime?: StringFieldUpdateOperationsInput | string
    size?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    url?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: StringFieldUpdateOperationsInput | string
    provider_metadata?: InputJsonValue | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type venuesUpsertWithoutUploadFileMorphInput = {
    update: XOR<venuesUpdateWithoutUploadFileMorphInput, venuesUncheckedUpdateWithoutUploadFileMorphInput>
    create: XOR<venuesCreateWithoutUploadFileMorphInput, venuesUncheckedCreateWithoutUploadFileMorphInput>
  }

  export type venuesUpdateWithoutUploadFileMorphInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postCode?: NullableStringFieldUpdateOperationsInput | string | null
    lat?: NullableFloatFieldUpdateOperationsInput | number | null
    lon?: NullableFloatFieldUpdateOperationsInput | number | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    breakfast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lunch?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dinner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    visible?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    test?: NullableStringFieldUpdateOperationsInput | string | null
    cosy?: NullableBoolFieldUpdateOperationsInput | boolean | null
    romantic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    weddings?: NullableBoolFieldUpdateOperationsInput | boolean | null
    post_code?: NullableStringFieldUpdateOperationsInput | string | null
    bachelor_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hen_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_area?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_dinning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_bar?: NullableBoolFieldUpdateOperationsInput | boolean | null
    venueType?: venueTypeUpdateOneWithoutVenuesInput
  }

  export type venuesUncheckedUpdateWithoutUploadFileMorphInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postCode?: NullableStringFieldUpdateOperationsInput | string | null
    lat?: NullableFloatFieldUpdateOperationsInput | number | null
    lon?: NullableFloatFieldUpdateOperationsInput | number | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    venue_type?: NullableIntFieldUpdateOperationsInput | number | null
    breakfast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lunch?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dinner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    visible?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    test?: NullableStringFieldUpdateOperationsInput | string | null
    cosy?: NullableBoolFieldUpdateOperationsInput | boolean | null
    romantic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    weddings?: NullableBoolFieldUpdateOperationsInput | boolean | null
    post_code?: NullableStringFieldUpdateOperationsInput | string | null
    bachelor_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hen_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_area?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_dinning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_bar?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type venuesCreateWithoutVenueTypeInput = {
    title?: string | null
    description?: string | null
    address?: string | null
    suburb?: string | null
    city?: string | null
    postCode?: string | null
    lat?: number | null
    lon?: number | null
    website?: string | null
    breakfast?: boolean | null
    lunch?: boolean | null
    dinner?: boolean | null
    visible?: boolean | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    test?: string | null
    cosy?: boolean | null
    romantic?: boolean | null
    weddings?: boolean | null
    post_code?: string | null
    bachelor_party?: boolean | null
    hen_party?: boolean | null
    outdoor_area?: boolean | null
    outdoor_dinning?: boolean | null
    outdoor_bar?: boolean | null
    uploadFileMorph?: upload_file_morphCreateNestedManyWithoutVenuesInput
  }

  export type venuesUncheckedCreateWithoutVenueTypeInput = {
    id?: number
    title?: string | null
    description?: string | null
    address?: string | null
    suburb?: string | null
    city?: string | null
    postCode?: string | null
    lat?: number | null
    lon?: number | null
    website?: string | null
    breakfast?: boolean | null
    lunch?: boolean | null
    dinner?: boolean | null
    visible?: boolean | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    test?: string | null
    cosy?: boolean | null
    romantic?: boolean | null
    weddings?: boolean | null
    post_code?: string | null
    bachelor_party?: boolean | null
    hen_party?: boolean | null
    outdoor_area?: boolean | null
    outdoor_dinning?: boolean | null
    outdoor_bar?: boolean | null
    uploadFileMorph?: upload_file_morphUncheckedCreateNestedManyWithoutVenuesInput
  }

  export type venuesCreateOrConnectWithoutVenueTypeInput = {
    where: venuesWhereUniqueInput
    create: XOR<venuesCreateWithoutVenueTypeInput, venuesUncheckedCreateWithoutVenueTypeInput>
  }

  export type venuesCreateManyVenueTypeInputEnvelope = {
    data: Enumerable<venuesCreateManyVenueTypeInput>
    skipDuplicates?: boolean
  }

  export type venuesUpsertWithWhereUniqueWithoutVenueTypeInput = {
    where: venuesWhereUniqueInput
    update: XOR<venuesUpdateWithoutVenueTypeInput, venuesUncheckedUpdateWithoutVenueTypeInput>
    create: XOR<venuesCreateWithoutVenueTypeInput, venuesUncheckedCreateWithoutVenueTypeInput>
  }

  export type venuesUpdateWithWhereUniqueWithoutVenueTypeInput = {
    where: venuesWhereUniqueInput
    data: XOR<venuesUpdateWithoutVenueTypeInput, venuesUncheckedUpdateWithoutVenueTypeInput>
  }

  export type venuesUpdateManyWithWhereWithoutVenueTypeInput = {
    where: venuesScalarWhereInput
    data: XOR<venuesUpdateManyMutationInput, venuesUncheckedUpdateManyWithoutVenuesInput>
  }

  export type venuesScalarWhereInput = {
    AND?: Enumerable<venuesScalarWhereInput>
    OR?: Enumerable<venuesScalarWhereInput>
    NOT?: Enumerable<venuesScalarWhereInput>
    id?: IntFilter | number
    title?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    address?: StringNullableFilter | string | null
    suburb?: StringNullableFilter | string | null
    city?: StringNullableFilter | string | null
    postCode?: StringNullableFilter | string | null
    lat?: FloatNullableFilter | number | null
    lon?: FloatNullableFilter | number | null
    website?: StringNullableFilter | string | null
    venue_type?: IntNullableFilter | number | null
    breakfast?: BoolNullableFilter | boolean | null
    lunch?: BoolNullableFilter | boolean | null
    dinner?: BoolNullableFilter | boolean | null
    visible?: BoolNullableFilter | boolean | null
    created_by?: IntNullableFilter | number | null
    updated_by?: IntNullableFilter | number | null
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    test?: StringNullableFilter | string | null
    cosy?: BoolNullableFilter | boolean | null
    romantic?: BoolNullableFilter | boolean | null
    weddings?: BoolNullableFilter | boolean | null
    post_code?: StringNullableFilter | string | null
    bachelor_party?: BoolNullableFilter | boolean | null
    hen_party?: BoolNullableFilter | boolean | null
    outdoor_area?: BoolNullableFilter | boolean | null
    outdoor_dinning?: BoolNullableFilter | boolean | null
    outdoor_bar?: BoolNullableFilter | boolean | null
  }

  export type venueTypeCreateWithoutVenuesInput = {
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    name?: string | null
  }

  export type venueTypeUncheckedCreateWithoutVenuesInput = {
    id?: number
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    name?: string | null
  }

  export type venueTypeCreateOrConnectWithoutVenuesInput = {
    where: venueTypeWhereUniqueInput
    create: XOR<venueTypeCreateWithoutVenuesInput, venueTypeUncheckedCreateWithoutVenuesInput>
  }

  export type upload_file_morphCreateWithoutVenuesInput = {
    related_type?: string | null
    field?: string | null
    order?: number | null
    uploadFile?: upload_fileCreateNestedOneWithoutUploadFileMorphInput
  }

  export type upload_file_morphUncheckedCreateWithoutVenuesInput = {
    id?: number
    upload_file_id?: number | null
    related_type?: string | null
    field?: string | null
    order?: number | null
  }

  export type upload_file_morphCreateOrConnectWithoutVenuesInput = {
    where: upload_file_morphWhereUniqueInput
    create: XOR<upload_file_morphCreateWithoutVenuesInput, upload_file_morphUncheckedCreateWithoutVenuesInput>
  }

  export type upload_file_morphCreateManyVenuesInputEnvelope = {
    data: Enumerable<upload_file_morphCreateManyVenuesInput>
    skipDuplicates?: boolean
  }

  export type venueTypeUpsertWithoutVenuesInput = {
    update: XOR<venueTypeUpdateWithoutVenuesInput, venueTypeUncheckedUpdateWithoutVenuesInput>
    create: XOR<venueTypeCreateWithoutVenuesInput, venueTypeUncheckedCreateWithoutVenuesInput>
  }

  export type venueTypeUpdateWithoutVenuesInput = {
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type venueTypeUncheckedUpdateWithoutVenuesInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type upload_file_morphUpsertWithWhereUniqueWithoutVenuesInput = {
    where: upload_file_morphWhereUniqueInput
    update: XOR<upload_file_morphUpdateWithoutVenuesInput, upload_file_morphUncheckedUpdateWithoutVenuesInput>
    create: XOR<upload_file_morphCreateWithoutVenuesInput, upload_file_morphUncheckedCreateWithoutVenuesInput>
  }

  export type upload_file_morphUpdateWithWhereUniqueWithoutVenuesInput = {
    where: upload_file_morphWhereUniqueInput
    data: XOR<upload_file_morphUpdateWithoutVenuesInput, upload_file_morphUncheckedUpdateWithoutVenuesInput>
  }

  export type upload_file_morphUpdateManyWithWhereWithoutVenuesInput = {
    where: upload_file_morphScalarWhereInput
    data: XOR<upload_file_morphUpdateManyMutationInput, upload_file_morphUncheckedUpdateManyWithoutUploadFileMorphInput>
  }

  export type itinerary_placesCreateWithoutItineraryInput = {
    user_id?: string | null
    venue_data?: InputJsonValue | null
    date?: Date | string | null
    time?: Date | string | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type itinerary_placesUncheckedCreateWithoutItineraryInput = {
    id?: number
    user_id?: string | null
    venue_data?: InputJsonValue | null
    date?: Date | string | null
    time?: Date | string | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type itinerary_placesCreateOrConnectWithoutItineraryInput = {
    where: itinerary_placesWhereUniqueInput
    create: XOR<itinerary_placesCreateWithoutItineraryInput, itinerary_placesUncheckedCreateWithoutItineraryInput>
  }

  export type itinerary_placesCreateManyItineraryInputEnvelope = {
    data: Enumerable<itinerary_placesCreateManyItineraryInput>
    skipDuplicates?: boolean
  }

  export type itinerary_placesUpsertWithWhereUniqueWithoutItineraryInput = {
    where: itinerary_placesWhereUniqueInput
    update: XOR<itinerary_placesUpdateWithoutItineraryInput, itinerary_placesUncheckedUpdateWithoutItineraryInput>
    create: XOR<itinerary_placesCreateWithoutItineraryInput, itinerary_placesUncheckedCreateWithoutItineraryInput>
  }

  export type itinerary_placesUpdateWithWhereUniqueWithoutItineraryInput = {
    where: itinerary_placesWhereUniqueInput
    data: XOR<itinerary_placesUpdateWithoutItineraryInput, itinerary_placesUncheckedUpdateWithoutItineraryInput>
  }

  export type itinerary_placesUpdateManyWithWhereWithoutItineraryInput = {
    where: itinerary_placesScalarWhereInput
    data: XOR<itinerary_placesUpdateManyMutationInput, itinerary_placesUncheckedUpdateManyWithoutPlacesInput>
  }

  export type itinerary_placesScalarWhereInput = {
    AND?: Enumerable<itinerary_placesScalarWhereInput>
    OR?: Enumerable<itinerary_placesScalarWhereInput>
    NOT?: Enumerable<itinerary_placesScalarWhereInput>
    id?: IntFilter | number
    user_id?: StringNullableFilter | string | null
    itinerary_id?: IntNullableFilter | number | null
    venue_data?: JsonNullableFilter
    date?: DateTimeNullableFilter | Date | string | null
    time?: DateTimeNullableFilter | Date | string | null
    created_by?: IntNullableFilter | number | null
    updated_by?: IntNullableFilter | number | null
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type itineraryCreateWithoutPlacesInput = {
    user_id?: string | null
    itinerary_date?: Date | string | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type itineraryUncheckedCreateWithoutPlacesInput = {
    id?: number
    user_id?: string | null
    itinerary_date?: Date | string | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type itineraryCreateOrConnectWithoutPlacesInput = {
    where: itineraryWhereUniqueInput
    create: XOR<itineraryCreateWithoutPlacesInput, itineraryUncheckedCreateWithoutPlacesInput>
  }

  export type itineraryUpsertWithoutPlacesInput = {
    update: XOR<itineraryUpdateWithoutPlacesInput, itineraryUncheckedUpdateWithoutPlacesInput>
    create: XOR<itineraryCreateWithoutPlacesInput, itineraryUncheckedCreateWithoutPlacesInput>
  }

  export type itineraryUpdateWithoutPlacesInput = {
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    itinerary_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type itineraryUncheckedUpdateWithoutPlacesInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    itinerary_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type upload_file_morphCreateManyUploadFileInput = {
    id?: number
    related_id?: number | null
    related_type?: string | null
    field?: string | null
    order?: number | null
  }

  export type upload_file_morphUpdateWithoutUploadFileInput = {
    related_type?: NullableStringFieldUpdateOperationsInput | string | null
    field?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    venues?: venuesUpdateOneWithoutUploadFileMorphInput
  }

  export type upload_file_morphUncheckedUpdateWithoutUploadFileInput = {
    id?: IntFieldUpdateOperationsInput | number
    related_id?: NullableIntFieldUpdateOperationsInput | number | null
    related_type?: NullableStringFieldUpdateOperationsInput | string | null
    field?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type upload_file_morphUncheckedUpdateManyWithoutUploadFileMorphInput = {
    id?: IntFieldUpdateOperationsInput | number
    related_id?: NullableIntFieldUpdateOperationsInput | number | null
    related_type?: NullableStringFieldUpdateOperationsInput | string | null
    field?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type venuesCreateManyVenueTypeInput = {
    id?: number
    title?: string | null
    description?: string | null
    address?: string | null
    suburb?: string | null
    city?: string | null
    postCode?: string | null
    lat?: number | null
    lon?: number | null
    website?: string | null
    breakfast?: boolean | null
    lunch?: boolean | null
    dinner?: boolean | null
    visible?: boolean | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    test?: string | null
    cosy?: boolean | null
    romantic?: boolean | null
    weddings?: boolean | null
    post_code?: string | null
    bachelor_party?: boolean | null
    hen_party?: boolean | null
    outdoor_area?: boolean | null
    outdoor_dinning?: boolean | null
    outdoor_bar?: boolean | null
  }

  export type venuesUpdateWithoutVenueTypeInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postCode?: NullableStringFieldUpdateOperationsInput | string | null
    lat?: NullableFloatFieldUpdateOperationsInput | number | null
    lon?: NullableFloatFieldUpdateOperationsInput | number | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    breakfast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lunch?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dinner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    visible?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    test?: NullableStringFieldUpdateOperationsInput | string | null
    cosy?: NullableBoolFieldUpdateOperationsInput | boolean | null
    romantic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    weddings?: NullableBoolFieldUpdateOperationsInput | boolean | null
    post_code?: NullableStringFieldUpdateOperationsInput | string | null
    bachelor_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hen_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_area?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_dinning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_bar?: NullableBoolFieldUpdateOperationsInput | boolean | null
    uploadFileMorph?: upload_file_morphUpdateManyWithoutVenuesInput
  }

  export type venuesUncheckedUpdateWithoutVenueTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postCode?: NullableStringFieldUpdateOperationsInput | string | null
    lat?: NullableFloatFieldUpdateOperationsInput | number | null
    lon?: NullableFloatFieldUpdateOperationsInput | number | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    breakfast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lunch?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dinner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    visible?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    test?: NullableStringFieldUpdateOperationsInput | string | null
    cosy?: NullableBoolFieldUpdateOperationsInput | boolean | null
    romantic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    weddings?: NullableBoolFieldUpdateOperationsInput | boolean | null
    post_code?: NullableStringFieldUpdateOperationsInput | string | null
    bachelor_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hen_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_area?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_dinning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_bar?: NullableBoolFieldUpdateOperationsInput | boolean | null
    uploadFileMorph?: upload_file_morphUncheckedUpdateManyWithoutVenuesInput
  }

  export type venuesUncheckedUpdateManyWithoutVenuesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postCode?: NullableStringFieldUpdateOperationsInput | string | null
    lat?: NullableFloatFieldUpdateOperationsInput | number | null
    lon?: NullableFloatFieldUpdateOperationsInput | number | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    breakfast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lunch?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dinner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    visible?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    test?: NullableStringFieldUpdateOperationsInput | string | null
    cosy?: NullableBoolFieldUpdateOperationsInput | boolean | null
    romantic?: NullableBoolFieldUpdateOperationsInput | boolean | null
    weddings?: NullableBoolFieldUpdateOperationsInput | boolean | null
    post_code?: NullableStringFieldUpdateOperationsInput | string | null
    bachelor_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hen_party?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_area?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_dinning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outdoor_bar?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type upload_file_morphCreateManyVenuesInput = {
    id?: number
    upload_file_id?: number | null
    related_type?: string | null
    field?: string | null
    order?: number | null
  }

  export type upload_file_morphUpdateWithoutVenuesInput = {
    related_type?: NullableStringFieldUpdateOperationsInput | string | null
    field?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    uploadFile?: upload_fileUpdateOneWithoutUploadFileMorphInput
  }

  export type upload_file_morphUncheckedUpdateWithoutVenuesInput = {
    id?: IntFieldUpdateOperationsInput | number
    upload_file_id?: NullableIntFieldUpdateOperationsInput | number | null
    related_type?: NullableStringFieldUpdateOperationsInput | string | null
    field?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type itinerary_placesCreateManyItineraryInput = {
    id?: number
    user_id?: string | null
    venue_data?: InputJsonValue | null
    date?: Date | string | null
    time?: Date | string | null
    created_by?: number | null
    updated_by?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type itinerary_placesUpdateWithoutItineraryInput = {
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    venue_data?: InputJsonValue | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type itinerary_placesUncheckedUpdateWithoutItineraryInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    venue_data?: InputJsonValue | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type itinerary_placesUncheckedUpdateManyWithoutPlacesInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    venue_data?: InputJsonValue | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}