import { GraphQLResolveInfo } from "graphql";
import { AggregateRestaurantsArgs } from "./args/AggregateRestaurantsArgs";
import { CreateManyRestaurantsArgs } from "./args/CreateManyRestaurantsArgs";
import { CreateRestaurantsArgs } from "./args/CreateRestaurantsArgs";
import { DeleteManyRestaurantsArgs } from "./args/DeleteManyRestaurantsArgs";
import { DeleteRestaurantsArgs } from "./args/DeleteRestaurantsArgs";
import { FindFirstRestaurantsArgs } from "./args/FindFirstRestaurantsArgs";
import { FindManyRestaurantsArgs } from "./args/FindManyRestaurantsArgs";
import { FindUniqueRestaurantsArgs } from "./args/FindUniqueRestaurantsArgs";
import { GroupByRestaurantsArgs } from "./args/GroupByRestaurantsArgs";
import { UpdateManyRestaurantsArgs } from "./args/UpdateManyRestaurantsArgs";
import { UpdateRestaurantsArgs } from "./args/UpdateRestaurantsArgs";
import { UpsertRestaurantsArgs } from "./args/UpsertRestaurantsArgs";
import { Restaurants } from "../../../models/Restaurants";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateRestaurants } from "../../outputs/AggregateRestaurants";
import { RestaurantsGroupBy } from "../../outputs/RestaurantsGroupBy";
export declare class RestaurantsCrudResolver {
    findUniqueRestaurants(ctx: any, info: GraphQLResolveInfo, args: FindUniqueRestaurantsArgs): Promise<Restaurants | null>;
    findFirstRestaurants(ctx: any, info: GraphQLResolveInfo, args: FindFirstRestaurantsArgs): Promise<Restaurants | null>;
    findManyRestaurants(ctx: any, info: GraphQLResolveInfo, args: FindManyRestaurantsArgs): Promise<Restaurants[]>;
    createRestaurants(ctx: any, info: GraphQLResolveInfo, args: CreateRestaurantsArgs): Promise<Restaurants>;
    createManyRestaurants(ctx: any, info: GraphQLResolveInfo, args: CreateManyRestaurantsArgs): Promise<AffectedRowsOutput>;
    deleteRestaurants(ctx: any, info: GraphQLResolveInfo, args: DeleteRestaurantsArgs): Promise<Restaurants | null>;
    updateRestaurants(ctx: any, info: GraphQLResolveInfo, args: UpdateRestaurantsArgs): Promise<Restaurants | null>;
    deleteManyRestaurants(ctx: any, info: GraphQLResolveInfo, args: DeleteManyRestaurantsArgs): Promise<AffectedRowsOutput>;
    updateManyRestaurants(ctx: any, info: GraphQLResolveInfo, args: UpdateManyRestaurantsArgs): Promise<AffectedRowsOutput>;
    upsertRestaurants(ctx: any, info: GraphQLResolveInfo, args: UpsertRestaurantsArgs): Promise<Restaurants>;
    aggregateRestaurants(ctx: any, info: GraphQLResolveInfo, args: AggregateRestaurantsArgs): Promise<AggregateRestaurants>;
    groupByRestaurants(ctx: any, info: GraphQLResolveInfo, args: GroupByRestaurantsArgs): Promise<RestaurantsGroupBy[]>;
}
